00001ECC Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/21/2021 10:39:40 PM

00000000                             1  *---------------------------------------------------------------------------------------------------------------------
00000000                             2  * Title      : Epic Brick Break
00000000                             3  * Written by : Tony Giumenta
00000000                             4  * Date       : 09/29/20
00000000                             5  * Description: The main hub for handling all of the game's files and majority of its equates.
00000000                             6  *              Main sets up the resolution, sounds, and sets up the starting UI for the game.
00000000                             7  *              Main also hosts the game loop which just calls the respective "functions" over & over until
00000000                             8  *              completion like inval'ing/drawing the player, updating/drawing the ball, and updating the LED displays.
00000000                             9  *---------------------------------------------------------------------------------------------------------------------
00001000                            10      ORG $1000
00001000                            11  bitmapdrawing   INCLUDE "bitmapdrawgame.x68"
00001000  =00000008                 12  RotateSwapVal       EQU     8       ; Rotation amount for byteswapping values and for fixing padding
00001000  =00000002                 13  PixelToByteVal      EQU     2       ; Shift amount to convert from pixels to bytes
00001000  =0000000A                 14  PixelOffset         EQU     $0A     ; Location of offset for pixel array
00001000                            15  
00001000  =00000008                 16  CornerDisplayXRef   EQU     $8  
00001000  =0000000C                 17  CornerDisplayYRef   EQU     $C  
00001000  =00000010                 18  WidthDisplayRef     EQU     $10 
00001000  =00000014                 19  WidthFileOffsetRef  EQU     $14 
00001000  =00000018                 20  HeightFileOffsetRef EQU     $18 
00001000  =0000001C                 21  HeightDisplayRef    EQU     $1C 
00001000  =00000020                 22  LocationScreenXRef  EQU     $20 
00001000  =00000024                 23  LocationScreenYRef  EQU     $24 
00001000                            24  
00001000  =00000008                 25  AmountOfSpace       EQU     8           ; Space amount needed for locals
00001000  =00000000                 26  WidthCoordOffset    EQU     $0      
00001000  =00000004                 27  HeightCoordOffset   EQU     $4      
00001000                            28  
00001000  =00F200FF                 29  TransparentColor    EQU     $00F200FF   ; If the pen color is this color, don't draw it, act as transparent
00001000                            30  
00001000                            31  ByteSwap
00001000  E058                      32      ror.w   #RotateSwapVal, d0  ; Swapping the first word's byte
00001002  4840                      33      swap    d0                  ; Swapping both words in the long word
00001004  E058                      34      ror.w   #RotateSwapVal, d0  ; Swapping the second word's byte
00001006  4E75                      35      rts
00001008                            36  
00001008                            37  DrawBitmap
00001008  48E7 FFFE                 38      movem.l d0-d7/a0-a6, -(sp) ; Save all original variables onto the stack
0000100C                            39                                 ; This allows the use of d0-d7 as temporary spaces now
0000100C  518F                      40      sub.l   #AmountOfSpace,sp  ; Make room for two local variables (coordinates) and set stack pointer
0000100E                            41  
0000100E                            42  ByteSwapPixelArray    
0000100E  2028 000A                 43      move.l  PixelOffset(a0),d0
00001012  4EB8 1000                 44      jsr     ByteSwap           ; ByteSwap the pixel offset
00001016  49F0 0000                 45      lea     (a0,d0),a4         ; Loads beginning of the pixel array
0000101A                            46      
0000101A                            47  ByteSwapWidth
0000101A  3003                      48      move.w  d3,d0       ; Move width into temporary storage
0000101C  4EB8 1000                 49      jsr     ByteSwap
00001020  4840                      50      swap    d0          ; Final swap since the value is only a word and not a long
00001022  3600                      51      move.w  d0,d3       ; Move the swapped value back into the width register    
00001024                            52     
00001024                            53  ByteSwapHeight
00001024  3004                      54      move.w  d4,d0       ; Move width into temporary storage
00001026  4EB8 1000                 55      jsr     ByteSwap
0000102A  4840                      56      swap    d0          ; Final swap since the value is only a word and not a long
0000102C  3800                      57      move.w  d0,d4       ; Move the swapped value back into the width register
0000102E                            58      
0000102E                            59  HeightShiftUp   
0000102E  2A04                      60      move.l  d4,d5                       ; Move height into temporary space
00001030  9AAF 001C                 61      sub.l   HeightDisplayRef(sp),d5     ; Get the number of rows to skip from the bottom of the image
00001034  9AAF 000C                 62      sub.l   CornerDisplayYRef(sp),d5    ; Get the number of rows to skip from the top (and bottom)
00001038  2C2F 001C                 63      move.l  HeightDisplayRef(sp),d6     ; Stores the amount of rows to start drawing considering the Y offset
0000103C                            64                                          ; Stores the height draw-counter
0000103C  2F46 0004                 65      move.l  d6,HeightCoordOffset(sp)
00001040                            66      
00001040                            67  RowStartByteSkip
00001040  2E03                      68      move.l  d3,d7                       ; Move the full width of the image (in pixels) in a temporary space
00001042  CEC5                      69      mulu.w  d5,d7                       ; Multiply this width by the number of rows needed to skip
00001044  E587                      70      asl.l   #PixelToByteVal,d7 
00001046  D9C7                      71      adda.l  d7,a4                       ; Skip to start initially reading pixels at correct height offset
00001048                            72      
00001048                            73  WidthByteSkip
00001048  2A03                      74      move.l  d3,d5                       ; Reuse temporary space to store width
0000104A  9AAF 0010                 75      sub.l   WidthDisplayRef(sp),d5      ; Gets how many "columns" to skip based on height
0000104E  9AAF 0008                 76      sub.l   CornerDisplayXRef(sp),d5    ; Gets how many "columns" to skip based on offset and height
00001052  262F 0010                 77      move.l  WidthDisplayRef(sp),d3      ; Number of pixels to print per row
00001056                            78      
00001056  2E05                      79      move.l  d5,d7                       ; Reuse temporary space to get the number of pixels to skip at end of row printing
00001058  E587                      80      asl.l   #PixelToByteVal,d7
0000105A                            81      
0000105A  282F 0008                 82      move.l  CornerDisplayXRef(sp),d4    ; Use an unused space to get number of pixels to skip from left of image
0000105E  E584                      83      asl.l   #PixelToByteVal,d4
00001060                            84      
00001060                            85  CounterAndCoordinateSetup
00001060  0CAF 00000000 0004        86      cmp.l   #0,HeightCoordOffset(sp)    ; If height coordinate is less than or equal to 0, done with subroutine
00001068  6F00 0044                 87      ble     Done
0000106C  42AF 0000                 88      clr.l   WidthCoordOffset(sp)        ; Reset width coordinate/counter
00001070  D9C4                      89      adda.l  d4,a4                       ; Start reading pixels from correct offset
00001072                            90      
00001072                            91  DrawingLoop
00001072  221C                      92      move.l  (a4)+,d1                    ; Move pen color into d1 and advance address to look at next pixel
00001074  E099                      93      ror.l   #RotateSwapVal,d1           ; Rotate to fix padding and converts the RGB->BGR
00001076                            94      
00001076  303C 0050                 95      move.w  #PenColorTrap,d0
0000107A  4E4F                      96      trap    #15                         ; Sets pen color
0000107C  0C81 00F200FF             97      cmpi.l  #TransparentColor,d1        ; If the color is equal to the transparent color, don't draw the pixel
00001082  6700 0018                 98      beq     SetWidthInformation
00001086                            99  
00001086                           100  DrawPixel
00001086  222F 0000                101      move.l  WidthCoordOffset(sp),d1     ; Move width coordinate into proper location for drawing
0000108A  D2AF 0020                102      add.l   LocationScreenXRef(sp),d1   ; Shift width coordinate based on offset
0000108E  242F 0004                103      move.l  HeightCoordOffset(sp),d2    ; Move height coordinate into proper location for drawing
00001092  D4AF 0024                104      add.l   LocationScreenYRef(sp),d2   ; Shift height coordinate based on offset
00001096  303C 0052                105      move.w  #DrawPixelTrap,d0      
0000109A  4E4F                     106      trap    #15                         ; Draws pixel
0000109C                           107  
0000109C                           108  SetWidthInformation
0000109C  52AF 0000                109      addi.l  #1,WidthCoordOffset(sp)     ; Increment width coordinate/counter
000010A0  B6AF 0000                110      cmp.l   WidthCoordOffset(sp),d3     ; If width counter is less than width of the image, keep drawing
000010A4  6ECC                     111      bgt     DrawingLoop
000010A6                           112  
000010A6                           113  AddressAndStackTidying
000010A6  D8C7                     114      adda.w  d7,a4                       ; Shift over necessary bytes to compensate pixels on the right, these should only ever be a word or smaller
000010A8  53AF 0004                115      subi.l  #1,HeightCoordOffset(sp)    ; Decrement height coordinate
000010AC  60B2                     116      bra     CounterAndCoordinateSetup
000010AE                           117      
000010AE                           118  Done
000010AE  508F                     119      add.l   #AmountOfSpace,sp           ; Set stack pointer back to return properly
000010B0  4CDF 7FFF                120      movem.l (sp)+,d0-d7/a0-a6           ; Reset original registers and fix stack pointer
000010B4  4E75                     121      rts                                 ; Return from subroutine back to main
000010B6                           122  
000010B6                           123  
000010B6                           124  
000010B6                           125  
000010B6                           126  
000010B6                           127  
000010B6                           128  
000010B6                           129  
000010B6                           130  
000010B6                           131  
000010B6                           132  
000010B6                           133  
000010B6                           134  -------------------- end include --------------------
000010B6                           135  inputhandler    INCLUDE "inputsetup.x68"
000010B6  =00000025                136  KeyLeftInput            EQU     $25
000010B6  =00000027                137  KeyRightInput           EQU     $27
000010B6                           138  
000010B6  =00000020                139  SpaceBarInput           EQU     $20
000010B6  =00000051                140  QuitButtonInput         EQU     $51
000010B6                           141  
000010B6  =00000008                142  ShiftInputAmount        EQU     8   ; Use this to shift over the space for multi-word byte input
000010B6                           143  
000010B6                           144  InputMovementSetup
000010B6  123C 0027                145      move.b  #KeyRightInput,d1
000010BA  E189                     146      lsl.l   #ShiftInputAmount,d1
000010BC  123C 0025                147      move.b  #KeyLeftInput,d1
000010C0  4E75                     148      rts
000010C2                           149      
000010C2                           150  InputUISetup
000010C2  123C 0020                151      move.b  #SpaceBarInput,d1
000010C6  E189                     152      lsl.l   #8,d1
000010C8  123C 0051                153      move.b  #QuitButtonInput,d1
000010CC  4E75                     154      rts
000010CE                           155  
000010CE                           156  PlayerInput
000010CE  4EB8 10B6                157      jsr     InputMovementSetup
000010D2  203C 00000013            158      move.l  #UserInputTrap,d0       ; Check for a button press of either the left/right key
000010D8  4E4F                     159      trap    #15
000010DA  0281 0000FFFF            160      andi.l  #$FFFF,d1              
000010E0  6700 006A                161      beq     noInput                 ; If no keys are pressed, mark the boolean and return out without drawing
000010E4                           162      
000010E4  45F9 001BC37C            163      lea     CharXCoordinateLeftCurr,a2
000010EA                           164      *Check which key was actually pressed and branch to the specific method for the movement*
000010EA  0C81 000000FF            165      cmpi.l  #$FF,d1
000010F0  6700 002E                166      beq     LeftInput               ; Branch to left input, otherwise fall into RightInput
000010F4                           167  RightInput
000010F4  4EB9 00001132            168      jsr     GetVelocity             ; Prepares paddle velocity prior to adding it directly
000010FA  D192                     169      add.l   d0,(a2)
000010FC  203C 00000280            170      move.l  #BGWidthDisplay, d0
00001102  2212                     171      move.l  (a2),d1
00001104  E689                     172      lsr.l   #LandShiftAmount,d1     ; Right shift the value so it is in 2^0
00001106  0681 00000040            173      addi.l  #PaddleWidth,d1         ; Add paddle width to the left side
0000110C  B280                     174      cmp.l   d0,d1
0000110E  6C00 0004                175      bge     SetRightCollided
00001112  4E75                     176      rts
00001114                           177  SetRightCollided
00001114  223C 00000240            178      move.l  #(BGWidthDisplay-PaddleWidth),d1    ; Data-driven setting of the paddle's left position
0000111A  E789                     179      lsl.l   #LandShiftAmount,d1                 ; Left shift the value so it is in the correct land  
0000111C  2481                     180      move.l  d1,(a2)                             ; Move that value into the left position of the paddle
0000111E  4E75                     181      rts
00001120                           182  LeftInput
00001120  4EB9 00001132            183      jsr     GetVelocity             ; Prepares paddle velocity prior to adding it directly
00001126  9192                     184      sub.l   d0,(a2)
00001128  6F00 0004                185      ble     SetLeftCollided         ; If the paddle collides with the left of the window, set the left position to 0
0000112C  4E75                     186      rts 
0000112E                           187  SetLeftCollided
0000112E  4292                     188      clr.l   (a2)                    ; Clear the x-position just in case the paddle went past the edge
00001130  4E75                     189      rts
00001132                           190      
00001132                           191  GetVelocity
00001132  203C 00000025            192      move.l  #PaddleVelocity,d0          ; Gets the actual paddle velocity
00001138  1239 001BC55D            193      move.b  (PaddleSpeedCollected),d1   
0000113E  6600 0004                194      bne     AddPaddleVelocity
00001142  4E75                     195      rts
00001144                           196  AddPaddleVelocity
00001144  0680 0000000D            197      addi.l  #VelocityToAdd,d0
0000114A  4E75                     198      rts
0000114C                           199     
0000114C                           200  noInput
0000114C  13FC 0001 001BC37A       201      move.b  #1,HaveHadNoInput
00001154  4E75                     202      rts
00001156                           203  
00001156                           204  
00001156                           205  
00001156                           206  
00001156                           207  
00001156                           208  
00001156                           209  
00001156                           210  
00001156                           211  
00001156                           212  
00001156                           213  
00001156                           214  
00001156                           215  
00001156                           216  -------------------- end include --------------------
00001156                           217  invalhandler    INCLUDE "invaldrawing.x68"
00001156                           218  AllRegisters                    REG     D0-D7/A0-A6
00001156  =00000002                219  InvalPlayerExtraBits            EQU     2            ; Extra pixels to draw to ensure it gets all the paddle pixels
00001156                           220  
00001156  =00000028                221  FirstCol                        EQU     40
00001156  =000000F0                222  SecondCol                       EQU     FirstCol+200
00001156  =00000168                223  ThirdCol                        EQU     SecondCol+120
00001156  =00000230                224  FourthCol                       EQU     ThirdCol+200
00001156                           225  
00001156                           226  DrawBackgroundFull
00001156  41F9 00001F12            227      lea     Background,a0
0000115C  203C 00000000            228      move.l  #DefaultCornerX, d0
00001162  223C 00000000            229      move.l  #DefaultCornerY, d1
00001168  243C 00000280            230      move.l  #BGWidthDisplay, d2
0000116E  3628 0012                231      move.w  WidthFileOffset(a0),d3
00001172  3828 0016                232      move.w  HeightFileOffset(a0),d4
00001176  2A3C 000002BC            233      move.l  #BGHeightDisplay, d5
0000117C  2C3C 00000000            234      move.l  #BGLocationScreenX,d6       ; Shift by the land shift to get the correct pixel location
00001182  2E3C 00000000            235      move.l  #BGLocationScreenY,d7
00001188  5387                     236      subi.l  #1, d7                      ; Gets rid of the black pixel row on the top of each bitmap
0000118A  4EB8 1008                237      jsr     DrawBitmap
0000118E  4E75                     238      rts
00001190                           239  
00001190                           240  DrawPlayerInitial
00001190  23FC 000008E4 001BC37C   241      move.l  #PlayerStartingPosX, CharXCoordinateLeftCurr    ; Reset character starting position
0000119A                           242  DrawPlayer
0000119A  223C 00FFF200            243      move.l  #PaddleColor,d1             ; Preps a space to hold the color of the outline of the rectangle
000011A0  203C 00000050            244      move.l  #PenColorTrap,d0
000011A6  4E4F                     245      trap    #15
000011A8  203C 00000051            246      move.l  #FillColorTrap,d0           ; Fill the rectangle with the Paddle color
000011AE  4E4F                     247      trap    #15
000011B0                           248      
000011B0  45F9 001BC37C            249      lea     CharXCoordinateLeftCurr,a2  ; Load the current position of the player
000011B6  2212                     250      move.l  (a2),d1                     ; The left side of the player holds the x-position of the top left value
000011B8  E689                     251      lsr.l   #LandShiftAmount,d1         ; Shift by the land shift to get the correct pixel location
000011BA  243C 00000264            252      move.l  #(LocationScreenY-1),d2     ; Gets rid of the black pixel row on the top of each bitmap
000011C0  2601                     253      move.l  d1,d3                       ; Can re-use the top-left x-value
000011C2  0683 0000003F            254      addi.l  #(PaddleWidth-1),d3         ; Add the paddle width to get the top-right x-value
000011C8  2802                     255      move.l  d2,d4                       ; Can reuse the upper-right y-value
000011CA  0684 00000007            256      addi.l  #(PaddleHeight-1),d4        ; Gets rid of the black pixel row on the top of each bitmap
000011D0  203C 00000057            257      move.l  #DrawRectangleTrap,d0
000011D6  4E4F                     258      trap    #15
000011D8                           259      
000011D8  223C 00000000            260      move.l  #BlackColor,d1              ; Reset fill color so that the UI can use a black fill color
000011DE  203C 00000051            261      move.l  #FillColorTrap,d0
000011E4  4E4F                     262      trap    #15
000011E6  4E75                     263      rts
000011E8                           264      
000011E8                           265  InvalPlayer
000011E8  45F9 001BC37C            266      lea     CharXCoordinateLeftCurr,a2
000011EE  48E7 FFFE                267      movem.l AllRegisters,-(sp)          ; Save all original variables onto the stack
000011F2                           268                                          ; This allows the use of d0-d7 as temporary spaces now
000011F2  41F9 00001F12            269      lea     Background,a0
000011F8  2012                     270      move.l  (a2),d0
000011FA  E688                     271      lsr.l   #LandShiftAmount,d0         ; Shift by the land shift to get the correct pixel location
000011FC  223C 00000265            272      move.l  #LocationScreenY,d1         ; The Y-chunk needs to start with the location of the paddle
00001202  243C 00000040            273      move.l  #PaddleWidth,d2             ; Width value
00001208  3628 0012                274      move.w  WidthFileOffset(a0),d3
0000120C  3828 0016                275      move.w  HeightFileOffset(a0),d4
00001210  2A3C 00000008            276      move.l  #PaddleHeight,d5            ; Height value
00001216  2C12                     277      move.l  (a2),d6                     ; Load the player's x-position as the x-position to draw
00001218  E68E                     278      lsr.l   #LandShiftAmount,d6         ; Shift by the land shift to get the correct pixel location
0000121A  2E3C 00000265            279      move.l  #LocationScreenY,d7         ; Load the player's y-position as the y-position to draw
00001220  5587                     280      subi.l  #InvalPlayerExtraBits, d7   ; Gets rid of the extra pixel row on the top of each bitmap
00001222  4EB8 1008                281      jsr     DrawBitmap
00001226                           282      
00001226  4CDF 7FFF                283      movem.l (sp)+,AllRegisters          ; Reset original registers and fix stack pointer
0000122A  4E75                     284      rts
0000122C                           285     
0000122C                           286  InvalBall
0000122C  41F9 00001F12            287      lea     Background, a0
00001232  4BF9 001BC384            288      lea     BallTopPosCurr,a5
00001238  4DF9 001BC380            289      lea     BallLeftPosCurr,a6
0000123E  2016                     290      move.l  (a6),d0                     ; Use the ball's left position as the top-left chunk to inval
00001240  E688                     291      lsr.l   #LandShiftAmount,d0         ; Shift by the land shift to get the correct pixel location
00001242  2215                     292      move.l  (a5),d1                     ; Use the ball's top position as the top-right chunk to inval
00001244  E689                     293      lsr.l   #LandShiftAmount,d1         ; Shift by the land shift to get the correct pixel location
00001246  243C 0000000C            294      move.l  #BallWidthDisplay,d2
0000124C  3628 0012                295      move.w  WidthFileOffset(a0),d3
00001250  3828 0016                296      move.w  HeightFileoffset(a0),d4 
00001254  2A3C 0000000C            297      move.l  #BallHeightDisplay,d5
0000125A  2C00                     298      move.l  d0,d6                       ; Re-use the ball's location for the location to invaldiate
0000125C  2E01                     299      move.l  d1,d7
0000125E  5387                     300      subi.l  #1, d7                      ; Gets rid of the extra pixel row on the top of each bitmap
00001260  4EB8 1008                301      jsr     DrawBitmap
00001264  4E75                     302      rts
00001266                           303      
00001266                           304  DrawBallInitial
00001266  23FC 00000AB4 001BC384   305      move.l  #BallLocationScreenY,BallTopPosCurr
00001270  4EB9 0000148E            306      jsr     RandomizeBallSelection      ; Loads the randomized ball
00001276                           307  DrawBall
00001276  4BF9 001BC384            308      lea     BallTopPosCurr,a5
0000127C  4DF9 001BC380            309      lea     BallLeftPosCurr,a6
00001282  43F9 001BC12E            310      lea     RandomlyChosenBall,a1       ; Loads the address of the variable which contains the address of the ball
00001288  2051                     311      move.l  (a1),a0                     ; Loads the address of the ball into a0 for printing using DrawBitmap
0000128A  203C 00000000            312      move.l  #DefaultCornerX,d0
00001290  223C 00000000            313      move.l  #DefaultCornerY,d1
00001296  243C 0000000C            314      move.l  #BallWidthDisplay,d2
0000129C  3628 0012                315      move.w  WidthFileOffset(a0),d3
000012A0  3828 0016                316      move.w  HeightFileOffset(a0),d4
000012A4  2A3C 0000000C            317      move.l  #BallHeightDisplay,d5
000012AA  2C16                     318      move.l  (a6),d6                     ; This is populated during UpdateBall and holds the horizontal movement
000012AC  E68E                     319      lsr.l   #LandShiftAmount,d6         ; Shift by the land shift to get the correct pixel location 
000012AE  2E15                     320      move.l  (a5),d7
000012B0  E68F                     321      lsr.l   #LandShiftAmount,d7         ; This is populated during UpdateBall and holds the vertical movement
000012B2  5387                     322      subi.l  #1,d7                       ; Gets rid of the black pixel row on the top of each bitmap
000012B4  4EB8 1008                323      jsr     DrawBitmap
000012B8                           324      
000012B8  4E75                     325      rts
000012BA                           326      
000012BA                           327  BrickDraw
000012BA                           328  CheckForYellowBrickDraw
000012BA  0C86 00000028            329      cmpi.l  #FirstCol,d6                ; First column chosen to draw a yellow brick
000012C0  6700 002A                330      beq     LoadYellow
000012C4  0C86 000000F0            331      cmpi.l  #SecondCol,d6
000012CA  6700 0020                332      beq     LoadYellow
000012CE  0C86 00000168            333      cmpi.l  #ThirdCol,d6
000012D4  6700 0016                334      beq     LoadYellow
000012D8  0C86 00000230            335      cmpi.l  #FourthCol,d6
000012DE  6700 000C                336      beq     LoadYellow
000012E2                           337  LoadGreen
000012E2  41F9 001B774A            338      lea     GreenBrick,a0 
000012E8  6000 0008                339      bra     FinishDraw
000012EC                           340  LoadYellow 
000012EC  41F9 001B8402            341      lea     YellowBrick,a0
000012F2                           342  FinishDraw
000012F2  0686 00000014            343      addi.l  #(BrickWidthDisplay>>1),d6      ; Check the space ahead if there is a powerup
000012F8  2206                     344      move.l  d6,d1                           ; Prep local spaces to check for pixel color at a location
000012FA  2407                     345      move.l  d7,d2
000012FC  203C 00000053            346      move.l  #GetPixelColorTrap,d0           ; Requires that the center of the powerup be of certain color
00001302  4E4F                     347      trap    #15
00001304  0486 00000014            348      subi.l  #(BrickWidthDisplay>>1),d6
0000130A                           349      
0000130A  0C80 000000FF            350      cmpi.l  #DoubleColor,d0
00001310  6700 0036                351      beq     DontDraw 
00001314  0C80 00A41E9B            352      cmpi.l  #SpeedColor,d0
0000131A  6700 002C                353      beq     DontDraw
0000131E                           354  
0000131E  203C 00000000            355      move.l  #DefaultCornerX,d0
00001324  223C 00000000            356      move.l  #DefaultCornerY,d1
0000132A  243C 00000028            357      move.l  #BrickWidthDisplay, d2
00001330  3628 0012                358      move.w  WidthFileOffset(a0),d3
00001334  3828 0016                359      move.w  HeightFileOffset(a0),d4
00001338  2A3C 00000014            360      move.l  #BrickHeightDisplay,d5
0000133E  4EB8 1008                361      jsr     DrawBitmap
00001342  4EB9 000018B0            362      jsr     SwapBuffer                      ; Show the brick that was just drawn
00001348                           363  DontDraw
00001348  4E75                     364      rts
0000134A                           365  FinishEarly
0000134A  4E75                     366      rts
0000134C                           367  
0000134C                           368  InvalBrick
0000134C  41F9 00001F12            369      lea     Background,a0
00001352  2006                     370      move.l  d6,d0
00001354  2207                     371      move.l  d7,d1
00001356  243C 00000028            372      move.l  #BrickWidthDisplay,d2
0000135C  3628 0012                373      move.w  WidthFileOffset(a0),d3
00001360  3828 0016                374      move.w  HeightFileoffset(a0),d4
00001364  2A3C 00000014            375      move.l  #BrickHeightDisplay,d5
0000136A  4EB8 1008                376      jsr     DrawBitmap
0000136E                           377      
0000136E  4E75                     378      rts
00001370                           379  
00001370                           380  DrawPowerups
00001370                           381  DrawDoubleScore
00001370  41F9 001B90BA            382      lea     DoublePowerup,a0
00001376  203C 00000000            383      move.l  #DefaultCornerX,d0
0000137C  223C 00000000            384      move.l  #DefaultCornerY,d1
00001382  243C 0000001E            385      move.l  #PowerupWidthDisplay,d2
00001388  3628 0012                386      move.w  WidthFileOffset(a0),d3
0000138C  3828 0016                387      move.w  HeightFileoffset(a0),d4
00001390  2A3C 0000001E            388      move.l  #PowerupHeightDisplay,d5
00001396                           389      ;move.l  #DoubleLocationScreenX,d6
00001396                           390      ;move.l  #DoubleLocationScreenY,d7
00001396  4EB8 1008                391      jsr     DrawBitmap
0000139A  4E75                     392      rts
0000139C                           393  DrawPaddleSpeed
0000139C  41F9 001B9F02            394      lea     PaddleSpeed,a0
000013A2  203C 00000000            395      move.l  #DefaultCornerX,d0
000013A8  223C 00000000            396      move.l  #DefaultCornerY,d1
000013AE  243C 0000001E            397      move.l  #PowerupWidthDisplay,d2
000013B4  3628 0012                398      move.w  WidthFileOffset(a0),d3
000013B8  3828 0016                399      move.w  HeightFileoffset(a0),d4
000013BC  2A3C 0000001E            400      move.l  #PowerupHeightDisplay,d5
000013C2                           401      ;move.l  #SpeedLocationScreenX,d6
000013C2                           402      ;move.l  #SpeedLocationScreenY,d7
000013C2  4EB8 1008                403      jsr     DrawBitmap
000013C6  4E75                     404      rts
000013C8                           405      
000013C8                           406  InvalDoubleScore
000013C8  48E7 FFFE                407      movem.l AllRegisters,-(sp)          ; Save all original variables onto the stack
000013CC  41F9 00001F12            408      lea     Background,a0
000013D2  203C 00000055            409      move.l  #DoubleLocationScreenX,d0
000013D8  223C 00000019            410      move.l  #DoubleLocationScreenY,d1
000013DE  243C 0000001E            411      move.l  #PowerupWidthDisplay,d2
000013E4  3628 0012                412      move.w  WidthFileOffset(a0),d3
000013E8  3828 0016                413      move.w  HeightFileoffset(a0),d4
000013EC  2A3C 0000001E            414      move.l  #PowerupHeightDisplay,d5
000013F2  2C3C 00000055            415      move.l  #DoubleLocationScreenX,d6
000013F8  2E3C 00000019            416      move.l  #DoubleLocationScreenY,d7
000013FE  4EB8 1008                417      jsr     DrawBitmap
00001402  4CDF 7FFF                418      movem.l (sp)+,AllRegisters          ; Reset original registers and fix stack pointer
00001406  4E75                     419      rts 
00001408                           420  InvalPaddleSpeed
00001408  48E7 FFFE                421      movem.l AllRegisters,-(sp)          ; Save all original variables onto the stack
0000140C  41F9 00001F12            422      lea     Background,a0
00001412  203C 0000020D            423      move.l  #SpeedLocationScreenX,d0
00001418  223C 00000019            424      move.l  #SpeedLocationScreenY,d1
0000141E  243C 0000001E            425      move.l  #PowerupWidthDisplay,d2
00001424  3628 0012                426      move.w  WidthFileOffset(a0),d3
00001428  3828 0016                427      move.w  HeightFileoffset(a0),d4
0000142C  2A3C 0000001E            428      move.l  #PowerupHeightDisplay,d5
00001432  2C3C 0000020D            429      move.l  #SpeedLocationScreenX,d6
00001438  2E3C 00000019            430      move.l  #SpeedLocationScreenY,d7
0000143E  4EB8 1008                431      jsr     DrawBitmap
00001442  4CDF 7FFF                432      movem.l (sp)+,AllRegisters          ; Reset original registers and fix stack pointer
00001446  4E75                     433      rts 
00001448                           434      
00001448                           435  InvalLED
00001448  223C 00000000            436      move.l  #BlackColor,d1              ; Preps a space to hold the color of the outside of the rectangle
0000144E  203C 00000050            437      move.l  #PenColorTrap,d0
00001454  4E4F                     438      trap    #15
00001456  203C 00000051            439      move.l  #FillColorTrap,d0           ; Fill the rectangle with the black background
0000145C  4E4F                     440      trap    #15
0000145E                           441      
0000145E                           442      *Lives*
0000145E  223C 00000048            443      move.l  #LEDEdgeLeft,d1             ; Top x-value
00001464  243C 000002D2            444      move.l  #LEDTopLeft,d2              ; Top y-value
0000146A  263C 00000052            445      move.l  #LEDEdgeRight,d3            ; Bottom x-value
00001470  283C 000002E6            446      move.l  #LEDBotRight,d4             ; Bottom y-value
00001476  203C 00000057            447      move.l  #DrawRectangleTrap,d0
0000147C  4E4F                     448      trap    #15
0000147E                           449      
0000147E                           450      *Score*
0000147E  0681 000001D4            451      addi.l  #(LEDScoreOffset-StartingSegOffset),d1  ; Add the offset to the beginning of the rectangle
00001484  263C 00000280            452      move.l  #BGWidthDisplay,d3                      ; Inval all the way to the edge of the screen to ensure its inval'd
0000148A  4E4F                     453      trap    #15
0000148C                           454  
0000148C  4E75                     455      rts
0000148E                           456  
0000148E                           457  
0000148E                           458  
0000148E                           459  
0000148E                           460  
0000148E                           461  
0000148E                           462  
0000148E                           463  
0000148E                           464  
0000148E                           465  
0000148E                           466  
0000148E                           467  
0000148E                           468  
0000148E                           469  
0000148E                           470  
0000148E                           471  
0000148E                           472  
0000148E                           473  
0000148E                           474  
0000148E                           475  
0000148E                           476  
0000148E                           477  
0000148E                           478  
0000148E                           479  -------------------- end include --------------------
0000148E                           480  ballhandler     INCLUDE "ball.x68"
0000148E  =00000001                481  HorizontalCollisionOffset           EQU     1       ; Pixels to add at the end of the ball to check for x-velocity change
0000148E                           482  
0000148E                           483  RandomizeBallSelection
0000148E  4EB9 00001828            484      jsr     GetRandomByteIntoD6
00001494  223C 00000007            485      move.l  #(AmountOfBalls-1),d1   ; -1 because the amount of balls is 1 higher than the random value check
0000149A  CC81                     486      and.l   d1,d6                   ; Gets a value 0-7
0000149C  41F9 001BC10A            487      lea     Balls,a0                ; Load the group of addresses into a temp space
000014A2  E58E                     488      lsl.l   #2,d6                   ; Shift the random value to eventually get the offset
000014A4  D1C6                     489      adda.l  d6,a0                   ; Add this offset to the ball array to get to the address where that ball is stored
000014A6  23D0 001BC12E            490      move.l  (a0),RandomlyChosenBall ; Move the the ball address into the variable for use in DrawBall
000014AC  4E75                     491      rts   
000014AE                           492      
000014AE                           493  UpdateBall
000014AE                           494  CollisionCheck
000014AE  4DF9 001BC380            495      lea     BallLeftPosCurr,a6
000014B4  4BF9 001BC384            496      lea     BallTopPosCurr,a5
000014BA                           497      *Prep width/height for collisions*
000014BA  2216                     498      move.l  (a6),d1
000014BC  E689                     499      lsr.l   #LandShiftAmount,d1
000014BE  2415                     500      move.l  (a5),d2
000014C0  E68A                     501      lsr.l   #LandShiftAmount,d2
000014C2                           502      
000014C2                           503      *Check for x-velocity flip first*
000014C2                           504      *Mid left of ball*
000014C2  0682 00000006            505      addi.l  #(BallHeightDisplay>>1),d2      ; Go down half the ball
000014C8  5381                     506      subi.l  #HorizontalCollisionOffset,d1   ; Subtract by this offset to get a wider range for collision
000014CA                           507      
000014CA  203C 00000053            508      move.l  #GetPixelColorTrap,d0
000014D0  4E4F                     509      trap    #15
000014D2  0C80 0044FF00            510      cmpi.l  #InnerGreenBrickColor,d0
000014D8  6700 018A                511      beq     SideGreen
000014DC  0C80 0000FFF6            512      cmpi.l  #InnerYellowBrickColor,d0
000014E2  6700 0176                513      beq     SideYellow
000014E6  0C80 000000FF            514      cmpi.l  #DoubleColor,d0
000014EC  6700 0878                515      beq     EnableDoubleScore
000014F0  0C80 00A41E9B            516      cmpi.l  #SpeedColor,d0
000014F6  6700 0886                517      beq     EnableSpeedPaddle
000014FA                           518  
000014FA  5281                     519      addi.l  #HorizontalCollisionOffset,d1   ; Add this back to get the mid-left of the ball exactly
000014FC                           520      *Check for x-velocity flip first*
000014FC                           521      *Mid right of ball*
000014FC  0681 0000000D            522      addi.l  #(BallWidthDisplay+HorizontalCollisionOffset),d1 ; Captures the mid-right of the ball plus the offset
00001502  203C 00000053            523      move.l  #GetPixelColorTrap,d0
00001508  4E4F                     524      trap    #15
0000150A  0C80 0044FF00            525      cmpi.l  #InnerGreenBrickColor,d0
00001510  6700 0152                526      beq     SideGreen
00001514  0C80 0000FFF6            527      cmpi.l  #InnerYellowBrickColor,d0
0000151A  6700 013E                528      beq     SideYellow
0000151E  0C80 000000FF            529      cmpi.l  #DoubleColor,d0
00001524  6700 0840                530      beq     EnableDoubleScore
00001528  0C80 00A41E9B            531      cmpi.l  #SpeedColor,d0
0000152E  6700 084E                532      beq     EnableSpeedPaddle
00001532                           533      
00001532                           534      *Prep width/height for collisions*
00001532  2216                     535      move.l  (a6),d1
00001534  E689                     536      lsr.l   #LandShiftAmount,d1
00001536  2415                     537      move.l  (a5),d2
00001538  E68A                     538      lsr.l   #LandShiftAmount,d2
0000153A                           539      
0000153A                           540      *Top-left of ball*
0000153A  203C 00000053            541      move.l  #GetPixelColorTrap,d0
00001540  4E4F                     542      trap    #15
00001542  0C80 0044FF00            543      cmpi.l  #InnerGreenBrickColor,d0
00001548  6700 013C                544      beq     TopGreen
0000154C  0C80 0000FFF6            545      cmpi.l  #InnerYellowBrickColor,d0
00001552  6700 0128                546      beq     TopYellow
00001556  0C80 000000FF            547      cmpi.l  #DoubleColor,d0
0000155C  6700 0808                548      beq     EnableDoubleScore
00001560  0C80 00A41E9B            549      cmpi.l  #SpeedColor,d0
00001566  6700 0816                550      beq     EnableSpeedPaddle
0000156A                           551  
0000156A                           552      *Bottom-left of ball*
0000156A  0682 0000000C            553      addi.l  #BallHeightDisplay,d2           ; Only need to add the height to the top-left of the ball to get bottom-left
00001570  203C 00000053            554      move.l  #GetPixelColorTrap,d0
00001576  4E4F                     555      trap    #15
00001578  0C80 00FFF200            556      cmpi.l  #PaddleColor,d0
0000157E  6700 00A4                557      beq     HitPaddle
00001582  0C80 0044FF00            558      cmpi.l  #InnerGreenBrickColor,d0
00001588  6700 0122                559      beq     BottomGreen
0000158C  0C80 0000FFF6            560      cmpi.l  #InnerYellowBrickColor,d0
00001592  6700 010E                561      beq     BottomYellow
00001596  0C80 000000FF            562      cmpi.l  #DoubleColor,d0
0000159C  6700 07C8                563      beq     EnableDoubleScore
000015A0  0C80 00A41E9B            564      cmpi.l  #SpeedColor,d0
000015A6  6700 07D6                565      beq     EnableSpeedPaddle    
000015AA                           566      
000015AA                           567      *Bottom-right of ball*
000015AA  0681 0000000C            568      addi.l  #BallWidthDisplay,d1            ; Add the width of the ball to get from bottom-left to bottom-right
000015B0  203C 00000053            569      move.l  #GetPixelColorTrap,d0
000015B6  4E4F                     570      trap    #15
000015B8  0C80 00FFF200            571      cmpi.l  #PaddleColor,d0
000015BE  6700 0064                572      beq     HitPaddle
000015C2  0C80 0044FF00            573      cmpi.l  #InnerGreenBrickColor,d0
000015C8  6700 00E2                574      beq     BottomGreen
000015CC  0C80 0000FFF6            575      cmpi.l  #InnerYellowBrickColor,d0
000015D2  6700 00CE                576      beq     BottomYellow
000015D6  0C80 000000FF            577      cmpi.l  #DoubleColor,d0
000015DC  6700 0788                578      beq     EnableDoubleScore
000015E0  0C80 00A41E9B            579      cmpi.l  #SpeedColor,d0
000015E6  6700 0796                580      beq     EnableSpeedPaddle
000015EA                           581      
000015EA                           582      ; Top-right of ball
000015EA  0482 0000000C            583      subi.l  #BallHeightDisplay,d2           ; Sub the height of the ball to get from bottom-right to top-right
000015F0  203C 00000053            584      move.l  #GetPixelColorTrap,d0
000015F6  4E4F                     585      trap    #15
000015F8  0C80 0044FF00            586      cmpi.l  #InnerGreenBrickColor,d0
000015FE  6700 0086                587      beq     TopGreen
00001602  0C80 0000FFF6            588      cmpi.l  #InnerYellowBrickColor,d0
00001608  6700 0072                589      beq     TopYellow
0000160C  0C80 000000FF            590      cmpi.l  #DoubleColor,d0
00001612  6700 0752                591      beq     EnableDoubleScore
00001616  0C80 00A41E9B            592      cmpi.l  #SpeedColor,d0
0000161C  6700 0760                593      beq     EnableSpeedPaddle
00001620                           594      
00001620  6000 00AE                595      bra     UpdateHorizontal
00001624                           596      
00001624                           597  HitPaddle
00001624  2E39 001BC37C            598      move.l  CharXCoordinateLeftCurr,d7      ; Get current paddle position
0000162A  E68F                     599      lsr.l   #LandShiftAmount,d7             ; Get back to 2^0 land
0000162C  9287                     600      sub.l   d7,d1                           ; Get position of ball relative to paddle
0000162E  41F9 001BC38C            601      lea     BallVelocityY,a0                ; Always flip y velocity
00001634  20BC FFFFFFC8            602      move.l  #-BallVelocityYRef,(a0)
0000163A  43F9 001BC55E            603      lea     BallVelocityPaddleTable,a1      ; This table contains the velocity's to set at points on the paddle
00001640  41F9 001BC388            604      lea     BallVelocityX,a0
00001646  E581                     605      asl.l   #2,d1                           ; Use this storage as an index in the table
00001648  2E31 1000                606      move.l  (a1,d1),d7                      ; Use this unused space to store the x velocity
0000164C  4487                     607      neg.l   d7                              ; Negate x velocity
0000164E  2087                     608      move.l  d7,(a0)                         ; Move the new velocity into the ball's x velocity
00001650  4EB9 00001E2E            609      jsr     PlayPaddleWall                  ; Sound
00001656  6000 0078                610      bra     UpdateHorizontal
0000165A                           611      
0000165A                           612  SideYellow
0000165A  4EB9 00001B9A            613      jsr     AddYellowToScore
00001660  6000 0008                614      bra     SideCollision
00001664                           615  SideGreen
00001664  4EB9 00001BA8            616      jsr     AddGreenToScore
0000166A                           617  SideCollision
0000166A  4EB9 000017CE            618      jsr     FindBrickPosition
00001670                           619  SideVelocityChange
00001670  41F9 001BC388            620      lea     BallVelocityX,a0
00001676  4490                     621      neg.l   (a0)
00001678  6000 004A                622      bra     CheckForWin
0000167C                           623  TopYellow
0000167C  4EB9 00001B9A            624      jsr     AddYellowToScore
00001682  6000 0008                625      bra     TopCollision
00001686                           626  TopGreen
00001686  4EB9 00001BA8            627      jsr     AddGreenToScore
0000168C                           628  TopCollision                        ; When the top left or top right of the ball collides with something
0000168C  4EB9 000017CE            629      jsr     FindBrickPosition       ; Finds brick and removes it once found
00001692                           630  TopVelocityChange
00001692  41F9 001BC38C            631      lea     BallVelocityY,a0
00001698  20BC 00000038            632      move.l  #BallVelocityYRef,(a0)
0000169E  6000 0024                633      bra     CheckForWin             ; Check to see if that was the last brick broken 
000016A2                           634  BottomYellow
000016A2  4EB9 00001B9A            635      jsr     AddYellowToScore
000016A8  6000 0008                636      bra     BottomCollision
000016AC                           637  BottomGreen
000016AC  4EB9 00001BA8            638      jsr     AddGreenToScore
000016B2                           639  BottomCollision                     ; When the bot left or bot right of the ball collides with something
000016B2  4EB9 000017CE            640      jsr     FindBrickPosition       ; Finds brick and removes it once found
000016B8                           641  BottomVelocityChange
000016B8  41F9 001BC38C            642      lea     BallVelocityY,a0
000016BE  20BC FFFFFFC8            643      move.l  #-BallVelocityYRef,(a0)  
000016C4                           644                                      ; Fall through to win check
000016C4                           645  CheckForWin
000016C4  53B9 001BC394            646      subi.l  #1,BrickCounter         ; Decrement brick counter
000016CA  6700 0588                647      beq     GameWinSetup            ; If 0, the player has won, set up the UI for that
000016CE  4E75                     648      rts
000016D0                           649      
000016D0                           650  UpdateHorizontal
000016D0  4EB8 122C                651      jsr     InvalBall               ; Remove ball from scene
000016D4  41F9 001BC388            652      lea     BallVelocityX,a0        ; Prep velocity change
000016DA  2010                     653      move.l  (a0),d0
000016DC  D196                     654      add.l   d0,(a6)
000016DE                           655      
000016DE  0C96 000013A0            656      cmpi.l  #(BGWidthDisplay-BallWidthDisplay)<<LandShiftAmount,(a6) ; Check if ball hit right side of screen
000016E4  6F00 000E                657      ble     noNegativeSetHorizontal
000016E8  4EB9 00001E2E            658      jsr     PlayPaddleWall          ; Sound
000016EE  4490                     659      neg.l   (a0)                    ; Negate x-velocity
000016F0  6000 0014                660      bra     noPositiveSetHorizontal
000016F4                           661  noNegativeSetHorizontal
000016F4  0C96 00000000            662      cmpi.l  #0,(a6)                 ; Check if ball hit left side of screen
000016FA  6E00 000A                663      bgt     noPositiveSetHorizontal
000016FE  4EB9 00001E2E            664      jsr     PlayPaddleWall
00001704  4490                     665      neg.l   (a0)                    ; Negate x-velocity
00001706                           666  noPositiveSetHorizontal
00001706                           667                                      ; Do nothing in this case, and purposely fall through to UpdateVertical 
00001706                           668  UpdateVertical
00001706  41F9 001BC38C            669      lea     BallVelocityY,a0
0000170C  2010                     670      move.l  (a0),d0                 
0000170E  D195                     671      add.l   d0,(a5)                 ; Add to the y-velocity here
00001710                           672      
00001710  0C95 00001580            673      cmpi.l  #(BGHeightDisplay-BallHeightDisplay)<<LandShiftAmount,(a5) ; Check if ball hit bottom of screen
00001716  6F00 000A                674      ble     noNegativeSetVertical
0000171A                           675      
0000171A  4EB9 00001BC6            676      jsr     DecrementLives          ; Ball hit bottom of screen, so try to decrement a life
00001720  4E75                     677      rts
00001722                           678  noNegativeSetVertical
00001722  0C95 00000000            679      cmpi.l  #0,(a5)                 ; Check if ball hit top of screen
00001728  6E00 0010                680      bgt     noPositiveSetVertical
0000172C  20BC 00000038            681      move.l  #BallVelocityYRef,(a0)  ; Ball hit top of screen
00001732  4EB9 00001E2E            682      jsr     PlayPaddleWall
00001738  4E75                     683      rts
0000173A                           684  noPositiveSetVertical
0000173A  4E75                     685      rts
0000173C                           686      
0000173C                           687  ResetBallInformation
0000173C  23FC 00000AB4 001BC384   688      move.l  #(BallLocationScreenY),BallTopPosCurr
00001746  23FC 000009C0 001BC380   689      move.l  #(BallLocationScreenX),BallLeftPosCurr
00001750  23FC 00000001 001BC388   690      move.l  #BallStartingVelocityX, BallVelocityX
0000175A  23FC 00000038 001BC38C   691      move.l  #BallVelocityYRef,BallVelocityY
00001764  4E75                     692      rts
00001766                           693  
00001766                           694  
00001766                           695  
00001766                           696  -------------------- end include --------------------
00001766                           697  brickhandler    INCLUDE "bricks.x68"
00001766  =00000008                698  InitializeSpaceAmount       EQU     8       ; Offset the stack for this/2 different local variables
00001766  =00000000                699  BrickCounterOffset          EQU     0       ; Offset on the stack for this equate
00001766  =00000004                700  BrickLocationOffset         EQU     4       ; Offset on the stack for this equate
00001766                           701  
00001766  =00000008                702  BrickHeightOffset           EQU     8       ; Space in between rows of bricks
00001766                           703  
00001766  =00000004                704  LongByteOffset              EQU     4       ; Used when doing a register offset during FindBrick
00001766  =0000000E                705  BricksPerRow                EQU     14 
00001766  =00000008                706  RowsOfBricks                EQU     8
00001766  =00000070                707  AmountOfBricks              EQU     BricksPerRow*RowsOfBricks
00001766  =00000002                708  NextWordOffset              EQU     2
00001766  =00000002                709  HeightWordOffset            EQU     2       ; Gets the last row of bricks given 
00001766  =00000004                710  WidthWordOffset             EQU     4       ; Gets the last brick's x-coordinate in a row
00001766  =00000000                711  BrickRowOffset              EQU     0    
00001766  =000001BE                712  BrickRowOffsetStarter       EQU     (LongByteOffset*AmountOfBricks)-HeightWordOffset
00001766  =000001BC                713  BrickInRowStarterValue      EQU     (LongByteOffset*AmountOfBricks)-WidthWordOffset
00001766                           714  
00001766                           715  DrawBricks
00001766  518F                     716      sub.l   #InitializeSpaceAmount,sp
00001768  2F7C 00000070 0000       717      move.l  #AmountOfBricks,BrickCounterOffset(sp)
00001770  42AF 0004                718      clr.l   BrickLocationOffset(sp)
00001774  4DF9 001BC39C            719      lea     BrickArray,a6
0000177A  2C3C 00000028            720      move.l  #StartingXPosition,d6   
00001780  2E3C 0000001C            721      move.l  #StartingYPosition,d7           ; Starting y positions for bricks
00001786                           722      
00001786                           723  LoopBegin
00001786  0C86 00000258            724      cmpi.l  #(BGWidthDisplay-BrickWidthDisplay),d6
0000178C  6700 0032                725      beq     ResetRow
00001790                           726      
00001790  4EB8 12BA                727      jsr     BrickDraw
00001794                           728      
00001794                           729      ; Move position of bricks to array
00001794  2A2F 0004                730      move.l  BrickLocationOffset(sp),d5
00001798  3D86 5000                731      move.w  d6,(a6,d5)                      ; Move the x-position into the brick array
0000179C  5485                     732      addi.l  #NextWordOffset,d5              ; Add two to get to the next word
0000179E  3D87 5000                733      move.w  d7,(a6,d5)                      ; Move the y-position into the brick array
000017A2  5485                     734      addi.l  #NextWordOffset,d5              ; Add two to get to the next word, a 0,0 position for next brick
000017A4  2F45 0004                735      move.l  d5,BrickLocationOffset(sp)      ; Shift the location offset over by a long-word
000017A8                           736      
000017A8  0686 00000028            737      addi.l  #BrickWidthDisplay,d6           ; Next x-position should be the current position plus a brick's length
000017AE                           738      
000017AE  53AF 0000                739      subi.l  #1,BrickCounterOffset(sp)       ; Decrement amount of bricks to print
000017B2  0CAF 00000000 0000       740      cmpi.l  #0,BrickCounterOffset(sp)       ; If not 0, keep printing bricks
000017BA  66CA                     741      bne     LoopBegin
000017BC                           742      
000017BC  508F                     743      add.l   #InitializeSpaceAmount,sp       ; Add back the values to the stack pointer
000017BE  4E75                     744      rts
000017C0                           745  ResetRow
000017C0  2C3C 00000028            746      move.l  #StartingXPosition,d6
000017C6  0687 0000001C            747      addi.l  #(BrickHeightDisplay+BrickHeightOffset),d7
000017CC  60B8                     748      bra     LoopBegin
000017CE                           749      
000017CE                           750  FindBrickPosition
000017CE  49F9 001BC39C            751      lea     BrickArray,a4
000017D4  2E3C 000001BE            752      move.l  #BrickRowOffsetStarter,d7
000017DA  3E34 7000                753      move.w  (a4,d7),d7          ; This space now holds the height row offset
000017DE                           754  FindRowBrick
000017DE  B487                     755      cmp.l   d7,d2               ; If the height of collision is higher than the last row, it hit the last row
000017E0  6C00 000A                756      bge     FindBrickInRow
000017E4  0487 0000001C            757      subi.l  #(BrickHeightDisplay+BrickHeightOffset),d7
000017EA  60F2                     758      bra     FindRowBrick
000017EC                           759  FindBrickInRow
000017EC  2C3C 000001BC            760      move.l  #BrickInRowStarterValue,d6
000017F2  3C34 6000                761      move.w  (a4,d6),d6          ; This space now holds the brick's x position value in the row
000017F6                           762  FindBrickInRowLoop
000017F6  B286                     763      cmp.l   d6,d1               ; If the x-value of collision is higher than the last brick, this is the brick hit
000017F8  6C00 000A                764      bge     FoundBrick          ; Found brick to destroy
000017FC  0486 00000028            765      subi.l  #BrickWidthDisplay,d6
00001802  60F2                     766      bra     FindBrickInRowLoop
00001804                           767  FoundBrick
00001804  4EB8 134C                768      jsr     InvalBrick          ; Once found, draw over it
00001808  4EB9 00001E4A            769      jsr     PlayBrickExplode    ; Sound
0000180E  4E75                     770      rts
00001810                           771  
00001810                           772  
00001810                           773  
00001810                           774  
00001810                           775  
00001810                           776  
00001810                           777  
00001810                           778  
00001810                           779  
00001810                           780  
00001810                           781  
00001810                           782  
00001810                           783  
00001810                           784  
00001810                           785  -------------------- end include --------------------
00001810                           786  randomnum       INCLUDE "randomNum.x68"
00001810                           787  ALL_REG                 REG     D0-D7/A0-A6
00001810  =00000012                788  Counter                 EQU     18
00001810                           789  
00001810                           790  SeedRandomNumber
00001810  48E7 FFFE                791          movem.l ALL_REG,-(sp)
00001814  4286                     792          clr.l   d6
00001816  103C 0008                793          move.b  #GetTimeTrap,d0
0000181A  4E4F                     794          trap    #15
0000181C                           795  
0000181C  23C1 001BC12A            796          move.l  d1,RandomValue
00001822  4CDF 7FFF                797          movem.l (sp)+,ALL_REG
00001826  4E75                     798          rts
00001828                           799  
00001828                           800  GetRandomByteIntoD6
00001828                           801          *Make room for 3 local variables*
00001828  48E7 8000                802          movem.l d0,-(sp)
0000182C  48E7 4000                803          movem.l d1,-(sp)
00001830  48E7 2000                804          movem.l d2,-(sp)
00001834  2039 001BC12A            805          move.l  RandomValue,d0
0000183A  72AF                     806          moveq   #$AF-$100,d1
0000183C  7412                     807          moveq   #Counter,d2             ; Counter for below
0000183E                           808  Ninc0   
0000183E  D080                     809      add.l   d0,d0
00001840  6400 0004                810      bcc Ninc1
00001844  B300                     811      eor.b   d1,d0
00001846                           812  Ninc1
00001846  51CA FFF6                813          dbf d2,Ninc0
0000184A  23C0 001BC12A            814      move.l  d0,RandomValue
00001850  4286                     815      clr.l   d6
00001852  1C00                     816      move.b  d0,d6
00001854                           817      
00001854                           818      *Fix stack pointer*
00001854  4CDF 0004                819          movem.l (sp)+,d2
00001858  4CDF 0002                820          movem.l (sp)+,d1
0000185C  4CDF 0001                821          movem.l (sp)+,d0
00001860  4E75                     822          rts
00001862                           823  
00001862                           824  TEMPRANDOMLONG  ds.l    1
00001866                           825  
00001866                           826  
00001866                           827  
00001866                           828  
00001866                           829  
00001866                           830  
00001866                           831  
00001866                           832  
00001866                           833  -------------------- end include --------------------
00001866                           834  uihandler       INCLUDE "startendui.x68"
00001866  =00000073                835  TitleLeftOffset             EQU     115
00001866  =00000064                836  TitleBottomOffset           EQU     100
00001866  =00000064                837  StartLeftOffset             EQU     100
00001866  =0000004B                838  StartBottomOffset           EQU     TitleBottomOffset-25
00001866  =00000001                839  UIShiftAmount               EQU     1       ; Used to get the middle of the screen in the preparation functions
00001866  =00000067                840  QuitLeftOffset              EQU     103
00001866  =00000032                841  QuitBottomOffset            EQU     TitleBottomOffset-50
00001866  =0000004B                842  ThanksLeftOffset            EQU     75
00001866                           843  
00001866  =00000130                844  GoalLeftOffset              EQU     304
00001866  =00000019                845  GoalBottomOffset            EQU     25
00001866  =000000FA                846  GreenBrickXPosition         EQU     250
00001866  =0000015E                847  GreenBrickYPosition         EQU     350
00001866  =00000014                848  GreenBrickTextLeftOffset    EQU     20
00001866  =FFFFFFFD                849  GreenBrickTextBottomOffset  EQU     GoalBottomOffset-28
00001866  =000000FA                850  YellowBrickXPosition        EQU     GreenBrickXPosition
00001866  =0000017C                851  YellowBrickYPosition        EQU     GreenBrickYPosition+30
00001866  =00000014                852  YellowBrickTextLeftOffset   EQU     GreenBrickTextLeftOffset
00001866  =FFFFFFE1                853  YellowBrickTextBottomOffset EQU     GreenBrickTextBottomOffset-28
00001866  =000000DC                854  PowerupsTextLeftOffset      EQU     220
00001866  =FFFFFFE6                855  PowerupsTextBottomOffset    EQU     YellowBrickTextBottomOffset+5      ; Depends on the brick's left/bottom offset
00001866  =000000FF                856  DoubleScoreXPosition        EQU     GreenBrickXPosition+5
00001866  =000001B3                857  DoubleScoreYPosition        EQU     YellowBrickYPosition+55
00001866  =000000FF                858  PaddleSpeedXPosition        EQU     DoubleScoreXPosition
00001866  =000001D6                859  PaddleSpeedYPosition        EQU     DoubleScoreYPosition+35
00001866  =00000014                860  DoubleScoreInfoLeftOffset   EQU     YellowBrickTextLeftOffset
00001866  =FFFFFFA3                861  DoubleScoreInfoBottomOffset EQU     YellowBrickTextBottomOffset-62
00001866  =00000014                862  PaddleSpeedInfoLeftOffset   EQU     DoubleScoreInfoLeftOffset
00001866  =FFFFFFDC                863  PaddleSpeedInfoBottomOffset EQU     DoubleScoreInfoBottomOffset+57      ; Depends on the bottom offset of the double score
00001866                           864  
00001866  =00000028                865  LoadingLeftOffset           EQU     40
00001866  =00000002                866  LoadingScreenStartVelocity  EQU     2       ; Starting velocity for moving in the loading text (0.5)
00001866  =00087000                867  LoadingTextStopLocation     EQU     552960  ; Stopping location for the text 270*2048 = 552960 (2^-11 land) 
00001866  =00000008                868  LoadingScreenLandShift1     EQU     8       ; 2^-11 land for this specific loading text
00001866  =00000003                869  LoadingScreenLandShift2     EQU     3       ; 2^-11 land for this specific loading text
00001866  =00000001                870  LoadingScreenAcceleration   EQU     1      
00001866                           871  
00001866  =0000000F                872  LivesLeftOffset             EQU     15
00001866  =000001E0                873  ScoreLeftOffset             EQU     480     ; Used in combination with LivesLeftOffset to prevent double loading
00001866  =0000004B                874  DoubleScoreLeftOffset       EQU     75
00001866  =00000163                875  DoubleScoreBottomOffset     EQU     355
00001866  =0000004B                876  PaddleSpeedLeftOffset       EQU     75
00001866  =00000177                877  PaddleSpeedBottomOffset     EQU     375
00001866  =00000028                878  GameOverLeftOffset          EQU     40
00001866  =00000019                879  GameOverBottomOffset        EQU     25
00001866  =000000C8                880  GameWinLeftOffset           EQU     200
00001866  =00000028                881  PlayAgainLeftOffset         EQU     GameOverLeftOffset
00001866  =00000019                882  PlayAgainBottomOffset       EQU     GameOverBottomOffset
00001866  =00000073                883  GoBackLeftOffset            EQU     115
00001866                           884  
00001866  =00000004                885  StackOffsetForEarlyQuit     EQU     4     
00001866                           886  
00001866                           887  PrepWidthHeightUI
00001866  323C 0140                888      move.w  #(BGWidthDisplay>>UIShiftAmount),d1
0000186A  343C 015E                889      move.w  #(BGHeightDisplay>>UIShiftAmount),d2
0000186E  4E75                     890      rts
00001870                           891  PrepWidthHeightInGameUI
00001870  323C 0000                892      move.w  #0,d1
00001874  343C 02BC                893      move.w  #BGHeightDisplay,d2
00001878  0642 0019                894      addi.w  #(BottomBlackBarOffset>>UIShiftAmount),d2
0000187C  4E75                     895      rts
0000187E                           896  
0000187E                           897  SetResolution
0000187E  223C 00000280            898      move.l  #BGWidthDisplay,d1                          ; Move width into the last 16 bits for output resolution setting
00001884  4841                     899      swap    d1                                          ; Move width to the first 16 bits for output resolution setting
00001886  323C 02EE                900      move.w  #(BGHeightDisplay+BottomBlackBarOffset),d1  ; Move height into the last 16 bits for output resolution setting
0000188A  203C 00000021            901      move.l  #OutputResTrap, d0  
00001890  4E4F                     902      trap    #15                                         ; Sets output resolution
00001892  4E75                     903      rts
00001894                           904      
00001894                           905  SetDoubleBuffering
00001894  123C 0011                906      move.b  #DoubleBufferingVal,d1      ; Set drawing mode to enable double buffering
00001898  203C 0000005C            907      move.l  #SetDrawingModeTrap,d0
0000189E  4E4F                     908      trap    #15
000018A0  4E75                     909      rts
000018A2                           910      
000018A2                           911  ClearScreen
000018A2  103C 000B                912      move.b  #ClearScreenTrap,d0
000018A6  223C 0000FF00            913      move.l  #ClearScreenMagicVal,d1
000018AC  4E4F                     914      trap    #15
000018AE  4E75                     915      rts
000018B0                           916      
000018B0                           917  SwapBuffer
000018B0  103C 005E                918      move.b  #RepaintFromBufferTrap,d0
000018B4  4E4F                     919      trap    #15
000018B6  4E75                     920      rts
000018B8                           921      
000018B8                           922  ResetGame
000018B8  42B9 001BC390            923      clr.l   (Score)
000018BE  23FC 00000003 001BC398   924      move.l  #MaxLives,(Lives)               ; Resets lives to the default
000018C8  23FC 00000070 001BC394   925      move.l  #AmountOfBricks,BrickCounter    ; Resets brick counter for determining win condition
000018D2  4EB8 173C                926      jsr     ResetBallInformation            ; Resets ball location/velocity
000018D6  4EB8 1156                927      jsr     DrawBackgroundFull
000018DA  4EB9 00001E1A            928      jsr     PlayMusic
000018E0  4EB9 00001AB0            929      jsr     DrawUIText
000018E6  4EB9 00001C00            930      jsr     UpdateLED
000018EC                           931      
000018EC  2C3C 00000055            932      move.l  #DoubleLocationScreenX,d6       ; Prepare the width/height of the location of the powerup
000018F2  2E3C 00000019            933      move.l  #DoubleLocationScreenY,d7
000018F8  4EB8 1370                934      jsr     DrawDoubleScore
000018FC  2C3C 0000020D            935      move.l  #SpeedLocationScreenX,d6        ; Prepare the width/height of the location of the powerup
00001902  2E3C 00000019            936      move.l  #SpeedLocationScreenY,d7
00001908  4EB8 139C                937      jsr     DrawPaddleSpeed
0000190C                           938      
0000190C  4EB8 18B0                939      jsr     SwapBuffer                      ; Show the powerups and the background 
00001910  4EB9 00001D96            940      jsr     DisablePowerups                 ; The player starts with no powerups enabled
00001916  4EB8 1266                941      jsr     DrawBallInitial
0000191A  4EB8 1190                942      jsr     DrawPlayerInitial
0000191E  4EB8 1766                943      jsr     DrawBricks
00001922  4EB8 18B0                944      jsr     SwapBuffer
00001926  4E75                     945      rts
00001928                           946      
00001928                           947  ShowStartingScreen
00001928                           948  ShowTitleText
00001928  43F9 001BC194            949      lea     TitleText,a1 
0000192E  4EB8 1866                950      jsr     PrepWidthHeightUI
00001932  0441 0073                951      subi.w  #TitleLeftOffset,d1
00001936  0442 0064                952      subi.w  #TitleBottomOffset,d2
0000193A  203C 0000005F            953      move.l  #DrawTextTrap,d0
00001940  4E4F                     954      trap    #15
00001942                           955  ShowStartText
00001942  43F9 001BC1B1            956      lea     StartText,a1
00001948  4EB8 1866                957      jsr     PrepWidthHeightUI
0000194C  0441 0064                958      subi.w  #StartLeftOffset,d1
00001950  0442 004B                959      subi.w  #StartBottomOffset,d2
00001954  4E4F                     960      trap    #15                         ; Trap code still what was set in ShowTitleText
00001956                           961  ShowQuitText
00001956  43F9 001BC1CA            962      lea     QuitText,a1
0000195C  4EB8 1866                963      jsr     PrepWidthHeightUI
00001960  0441 0067                964      subi.w  #QuitLeftOffset,d1
00001964  0442 0032                965      subi.w  #QuitBottomOffset,d2
00001968  4E4F                     966      trap    #15                         ; Trap code still what was set in ShowTitleText
0000196A  4E75                     967      rts
0000196C                           968      
0000196C                           969  StartScreenInput
0000196C  4281                     970      clr.l   d1
0000196E  4EB8 10C2                971      jsr     InputUISetup
00001972  203C 00000013            972      move.l  #UserInputTrap,d0           ; Check for a button press of either the spacebar/quit button
00001978  4E4F                     973      trap    #15
0000197A  0241 FFFF                974      andi    #$FFFF,d1
0000197E  67EC                     975      beq     StartScreenInput            ; No input, continue to wait for input
00001980  0C81 0000FF00            976      cmpi.l  #$FF00,d1
00001986  6700 FF1A                977      beq     ClearScreen                 ; Branching here also rts' back to main
0000198A                           978      
0000198A                           979  QuitEarlyInput
0000198A  588F                     980      add.l   #StackOffsetForEarlyQuit,sp
0000198C  4EB8 18A2                981      jsr     ClearScreen
00001990  4EB9 000019A0            982      jsr     ShowThanksText
00001996  4EB9 00001E82            983      jsr     StopMusic
0000199C  6000 0570                984      bra     End
000019A0                           985     
000019A0                           986  ShowThanksText
000019A0  43F9 001BC2C3            987      lea     ThanksText,a1
000019A6  4EB8 1866                988      jsr     PrepWidthHeightUI
000019AA  0441 004B                989      subi.w  #ThanksLeftOffset,d1
000019AE  203C 0000005F            990      move.l  #DrawTextTrap,d0
000019B4  4E4F                     991      trap    #15
000019B6  4E75                     992      rts
000019B8                           993      
000019B8                           994  ShowLegend
000019B8                           995  ShowGoalText
000019B8  43F9 001BC1E4            996      lea     GoalText,a1
000019BE  4EB8 1866                997      jsr     PrepWidthHeightUI
000019C2  0441 0130                998      subi.w  #GoalLeftOffset,d1
000019C6  0442 0019                999      subi.w  #GoalBottomOffset,d2
000019CA  203C 0000005F           1000      move.l  #DrawTextTrap,d0
000019D0  4E4F                    1001      trap    #15
000019D2                          1002  ShowGreenBrick
000019D2  2C3C 000000FA           1003      move.l  #GreenBrickXPosition,d6
000019D8  2E3C 0000015E           1004      move.l  #GreenBrickYPosition,d7
000019DE  4EB8 12E2               1005      jsr     LoadGreen
000019E2                          1006  ShowYellowBrick
000019E2  2C3C 000000FA           1007      move.l  #YellowBrickXPosition,d6
000019E8  2E3C 0000017C           1008      move.l  #YellowBrickYPosition,d7
000019EE  4EB8 12EC               1009      jsr     LoadYellow
000019F2                          1010  ShowGreenText
000019F2  43F9 001BC231           1011      lea     GreenBrickText,a1
000019F8  4EB8 1866               1012      jsr     PrepWidthHeightUI
000019FC  0441 0014               1013      subi.w  #GreenBrickTextLeftOffset,d1
00001A00  0442 FFFD               1014      subi.w  #GreenBrickTextBottomOffset,d2
00001A04  203C 0000005F           1015      move.l  #DrawTextTrap,d0
00001A0A  4E4F                    1016      trap    #15
00001A0C                          1017  ShowYellowText
00001A0C  43F9 001BC23B           1018      lea     YellowBrickText,a1
00001A12  0442 FFE1               1019      subi.w  #YellowBrickTextBottomOffset,d2
00001A16  4E4F                    1020      trap    #15
00001A18                          1021  ShowPowerupsText
00001A18  43F9 001BC285           1022      lea     PowerupsText,a1
00001A1E  0441 00DC               1023      subi.w  #PowerupsTextLeftOffset,d1
00001A22  0442 FFE6               1024      subi.w  #PowerupsTextBottomOffset,d2
00001A26  4E4F                    1025      trap    #15
00001A28                          1026  ShowDoubleScoreIcon
00001A28  2C3C 000000FF           1027      move.l  #DoubleScoreXPosition,d6
00001A2E  2E3C 000001B3           1028      move.l  #DoubleScoreYPosition,d7
00001A34  4EB8 1370               1029      jsr     DrawDoubleScore
00001A38                          1030  ShowPaddleSpeedIcon
00001A38  2C3C 000000FF           1031      move.l  #PaddleSpeedXPosition,d6
00001A3E  2E3C 000001D6           1032      move.l  #PaddleSpeedYPosition,d7
00001A44  4EB8 139C               1033      jsr     DrawPaddleSpeed
00001A48                          1034  ShowDoubleScoreInfoText
00001A48  43F9 001BC247           1035      lea     DoubleScoreInfoText,a1
00001A4E  4EB8 1866               1036      jsr     PrepWidthHeightUI
00001A52  0441 0014               1037      subi.w  #DoubleScoreInfoLeftOffset,d1
00001A56  0442 FFA3               1038      subi.w  #DoubleScoreInfoBottomOffset,d2
00001A5A  203C 0000005F           1039      move.l  #DrawTextTrap,d0
00001A60  4E4F                    1040      trap    #15
00001A62                          1041  ShowPaddleSpeedInfoText
00001A62  43F9 001BC267           1042      lea     PaddleSpeedInfoText,a1
00001A68  0442 FFDC               1043      subi.w  #PaddleSpeedInfoBottomOffset,d2
00001A6C  4E4F                    1044      trap    #15  
00001A6E  4EB8 18B0               1045      jsr     SwapBuffer                  ; After all this drawing, show to screen
00001A72  4E75                    1046      rts                                 ; Returns from the entire ShowLegend "function"
00001A74                          1047  
00001A74                          1048  ShowLoadingScreen
00001A74  43F9 001BC334           1049      lea     LoadingText,a1 
00001A7A  45F9 001BC340           1050      lea     LoadingTextPos,a2
00001A80  24BC 00000002           1051      move.l  #LoadingScreenStartVelocity,(a2)
00001A86  4EB8 1866               1052      jsr     PrepWidthHeightUI
00001A8A  4281                    1053      clr.l   d1                          ; Clear out to ensure that the x position is 0
00001A8C  4283                    1054      clr.l   d3
00001A8E                          1055  AccelerateLoadingText
00001A8E  203C 0000005F           1056      move.l  #DrawTextTrap,d0
00001A94  4E4F                    1057      trap    #15
00001A96  D792                    1058      add.l   d3,(a2)                             ; Adds the velocity to the position of the text
00001A98  2212                    1059      move.l  (a2),d1                             ; Move the position into the space that allows for printing text
00001A9A  E089                    1060      lsr.l   #LoadingScreenlandShift1,d1         ; Shift the acceleration to the 2^0 land for printing
00001A9C  E689                    1061      lsr.l   #LoadingScreenlandShift2,d1
00001A9E  4EB8 18B0               1062      jsr     SwapBuffer                          ; Show the loading text right before moving it
00001AA2  5283                    1063      addi.l  #LoadingScreenAcceleration,d3       ; Add the acceleration to the velocity value over time
00001AA4  0C81 0000010E           1064      cmpi.l  #(LoadingTextStopLocation>>LoadingScreenLandShift1>>LoadingScreenLandShift2),d1 ; Shift by the land bits
00001AAA  6DE2                    1065      blt     AccelerateLoadingText               ; If the text is not at the stopping location, accelerate the text forward again
00001AAC  4292                    1066      clr.l   (a2)
00001AAE  4E75                    1067      rts 
00001AB0                          1068      
00001AB0                          1069  DrawUIText
00001AB0                          1070  ShowLivesText
00001AB0  43F9 001BC344           1071      lea     LivesText,a1
00001AB6  4EB8 1870               1072      jsr     PrepWidthHeightInGameUI
00001ABA  0681 0000000F           1073      addi.l  #LivesLeftOffset,d1
00001AC0  203C 0000005F           1074      move.l  #DrawTextTrap,d0
00001AC6  4E4F                    1075      trap    #15
00001AC8                          1076  ShowScoreText
00001AC8  43F9 001BC34B           1077      lea     ScoreText,a1
00001ACE  0681 000001E0           1078      addi.l  #ScoreLeftOffset,d1         ; Also attached to the LivesLeftOffset to prevent another prep
00001AD4  4E4F                    1079      trap    #15
00001AD6  4E75                    1080      rts
00001AD8                          1081      
00001AD8                          1082  ShowDoubleScoreText
00001AD8  43F9 001BC352           1083      lea     DoubleScoreText,a1
00001ADE  4EB8 1866               1084      jsr     PrepWidthHeightUI
00001AE2  0481 0000004B           1085      subi.l  #DoubleScoreLeftOffset,d1
00001AE8  0682 00000163           1086      addi.l  #DoubleScoreBottomOffset,d2
00001AEE  203C 0000005F           1087      move.l  #DrawTextTrap,d0
00001AF4  4E4F                    1088      trap    #15
00001AF6  4E75                    1089      rts
00001AF8                          1090      
00001AF8                          1091  ShowPaddleSpeedText
00001AF8  43F9 001BC366           1092      lea     PaddleSpeedText,a1
00001AFE  4EB8 1866               1093      jsr     PrepWidthHeightUI
00001B02  0481 0000004B           1094      subi.l  #PaddleSpeedLeftOffset,d1
00001B08  0682 00000177           1095      addi.l  #PaddleSpeedBottomOffset,d2
00001B0E  203C 0000005F           1096      move.l  #DrawTextTrap,d0
00001B14  4E4F                    1097      trap    #15
00001B16  4E75                    1098      rts
00001B18                          1099      
00001B18                          1100  ShowGameOverUI
00001B18  43F9 001BC2D7           1101      lea     GameOverText,a1
00001B1E  4EB8 1866               1102      jsr     PrepWidthHeightUI
00001B22  0441 0028               1103      subi.w  #GameOverLeftOffset,d1
00001B26  0442 0019               1104      subi.w  #GameOverBottomOffset,d2
00001B2A  203C 0000005F           1105      move.l  #DrawTextTrap,d0
00001B30  4E4F                    1106      trap    #15
00001B32                          1107  ShowPlayAgainText
00001B32  43F9 001BC316           1108      lea     PlayAgainText,a1            ; Play again text
00001B38  4EB8 1866               1109      jsr     PrepWidthHeightUI
00001B3C  0441 0073               1110      subi.w  #GoBackLeftOffset,d1
00001B40  4E4F                    1111      trap    #15 
00001B42  4EB9 00001EA2           1112      jsr     PlayDefeatMusic             ; Stops main music and plays defeat sound
00001B48  4E75                    1113      rts
00001B4A                          1114      
00001B4A                          1115  ShowGameWinUI
00001B4A  43F9 001BC2E2           1116      lea     GameWinText,a1
00001B50  4EB8 1866               1117      jsr     PrepWidthHeightUI
00001B54  0481 000000C8           1118      subi.l  #GameWinLeftOffset,d1
00001B5A  0482 00000019           1119      subi.l  #PlayAgainBottomOffset,d2
00001B60  203C 0000005F           1120      move.l  #DrawTextTrap,d0
00001B66  4E4F                    1121      trap    #15
00001B68  4EB8 1B32               1122      jsr     ShowPlayAgainText
00001B6C  4EB9 00001E90           1123      jsr     PlayVictoryMusic            ; Stops main music and plays victory sound
00001B72  4E75                    1124      rts
00001B74                          1125  
00001B74                          1126  EndGameInput
00001B74  4281                    1127      clr.l   d1
00001B76                          1128  EndGameLoop
00001B76  123C 0020               1129      move.b  #SpaceBarInput,d1
00001B7A  203C 00000013           1130      move.l  #UserInputTrap,d0           ; Check for a button press of the spacebar
00001B80  4E4F                    1131      trap    #15
00001B82  0241 00FF               1132      andi    #$FF,d1
00001B86  67EE                    1133      beq     EndGameLoop
00001B88                          1134  PlayAgainEnabled
00001B88  4EB8 18A2               1135      jsr     ClearScreen                 
00001B8C  4EB8 1A74               1136      jsr     ShowLoadingScreen           ; If the player wants to play again, show the loading screen
00001B90  4EB8 18B0               1137      jsr     SwapBuffer
00001B94  4EB8 18B8               1138      jsr     ResetGame                   ; Must reset when a player wants to play again
00001B98  4E75                    1139      rts
00001B9A                          1140  
00001B9A                          1141  
00001B9A                          1142  
00001B9A                          1143  
00001B9A                          1144  
00001B9A                          1145  
00001B9A                          1146  
00001B9A                          1147  
00001B9A                          1148  
00001B9A                          1149  
00001B9A                          1150  
00001B9A                          1151  
00001B9A                          1152  
00001B9A                          1153  
00001B9A                          1154  
00001B9A                          1155  
00001B9A                          1156  
00001B9A                          1157  
00001B9A                          1158  
00001B9A                          1159  
00001B9A                          1160  
00001B9A                          1161  -------------------- end include --------------------
00001B9A                          1162  livesandscore   INCLUDE "livesandscore.x68"
00001B9A                          1163  AllRegisters                    REG     D0-D7/A0-A6
00001B9A                          1164  
00001B9A                          1165  AddYellowToScore
00001B9A  48E7 FFFE               1166      movem.l AllRegisters,-(sp)          ; Save all original variables onto the stack
00001B9E                          1167                                          ; This allows the use of d0-d7 as temporary spaces now
00001B9E  203C 0000000A           1168      move.l  #YellowBrickScore,d0
00001BA4  6000 000C               1169      bra     AddScore
00001BA8                          1170  AddGreenToScore
00001BA8  48E7 FFFE               1171      movem.l AllRegisters,-(sp)          ; Save all original variables onto the stack
00001BAC                          1172                                          ; This allows the use of d0-d7 as temporary spaces now
00001BAC  203C 00000001           1173      move.l  #GreenBrickScore,d0
00001BB2                          1174  AddScore
00001BB2  1239 001BC55C           1175      move.b  (DoubleScoreCollected),d1
00001BB8  E320                    1176      asl.b   d1,d0                       ; If the powerup is enabled, the score to be added will be shifted by 1, or doubled
00001BBA  D1B9 001BC390           1177      add.l   d0,(Score)                  ; Increment score
00001BC0                          1178      
00001BC0  4CDF 7FFF               1179      movem.l (sp)+,AllRegisters          ; Reset original registers and fix stack pointer
00001BC4  4E75                    1180      rts
00001BC6                          1181  
00001BC6                          1182  DecrementLives
00001BC6  43F9 001BC398           1183      lea     Lives,a1
00001BCC  53B9 001BC398           1184      subi.l  #1,Lives
00001BD2  6700 006A               1185      beq     GameOverSetup 
00001BD6  4EB8 11E8               1186      jsr     InvalPlayer                 ; Remove the player from the scene
00001BDA  4EB8 1190               1187      jsr     DrawPlayerInitial           ; Move the player back to the starting point 
00001BDE  4EB8 173C               1188      jsr     ResetBallInformation        ; Reset ball position & velocity to get back to initial position
00001BE2  4EB8 1276               1189      jsr     DrawBall                    
00001BE6  4EB9 00001C00           1190      jsr     UpdateLED                   ; Update both here so that lives updates prior to delay and 
00001BEC                          1191                                          ; as a precaution for updating score
00001BEC  4EB8 18B0               1192      jsr     SwapBuffer                  ; Show the updated UI and player/ball position to the player
00001BF0  223C 000000C8           1193      move.l  #DelayTime,d1               ; Essentially pauses the game for a short while so the player can 
00001BF6                          1194                                          ; gather surroundings and pla again
00001BF6  203C 00000017           1195      move.l  #DelayTrap,d0
00001BFC  4E4F                    1196      trap    #15
00001BFE  4E75                    1197      rts   
00001C00                          1198      
00001C00                          1199  UpdateLED
00001C00  4EB8 1448               1200      jsr     InvalLED
00001C04  4EB9 00001C12           1201      jsr     SetLivesLED                 ; Called every frame regardless if lives are lost or not, for clarity
00001C0A                          1202                                          ; # digits is small enough to print quickly enough
00001C0A  4EB9 00001C26           1203      jsr     SetScoreLED
00001C10  4E75                    1204      rts
00001C12                          1205  SetLivesLED
00001C12  2039 001BC398           1206      move.l  (Lives),d0
00001C18  42B9 00001C6A           1207      clr.l   (OriginOffset)
00001C1E  4EB9 00001C72           1208      jsr     LEDSegmentDisplay
00001C24  4E75                    1209      rts
00001C26                          1210  SetScoreLED
00001C26  2039 001BC390           1211      move.l  (Score),d0
00001C2C  23FC 00000204 00001C6A  1212      move.l  #LEDScoreOffset,OriginOffset
00001C36  4EB9 00001C72           1213      jsr     LEDSegmentDisplay
00001C3C  4E75                    1214      rts 
00001C3E                          1215      
00001C3E                          1216  GameOverSetup
00001C3E  4EB8 18A2               1217      jsr     ClearScreen
00001C42  4EB8 18B0               1218      jsr     SwapBuffer
00001C46  4EB8 1B18               1219      jsr     ShowGameOverUI
00001C4A  4EB8 18B0               1220      jsr     SwapBuffer
00001C4E  4EB8 1B74               1221      jsr     EndGameInput
00001C52                          1222  ReturnToGameLoop
00001C52  4E75                    1223      rts                                 ; Back to game loop
00001C54                          1224      
00001C54                          1225  GameWinSetup
00001C54  4EB8 18A2               1226      jsr     ClearScreen
00001C58  4EB8 18B0               1227      jsr     SwapBuffer
00001C5C  4EB8 1B4A               1228      jsr     ShowGameWinUI
00001C60  4EB8 18B0               1229      jsr     SwapBuffer
00001C64  4EB8 1B74               1230      jsr     EndGameInput
00001C68  4E75                    1231      rts                                 ; Back to game loop
00001C6A                          1232  
00001C6A                          1233  
00001C6A                          1234  
00001C6A                          1235  
00001C6A                          1236  
00001C6A                          1237  -------------------- end include --------------------
00001C6A                          1238  ledsegment      INCLUDE "ledsegment.x68"
00001C6A                          1239  AllRegisters            REG     D0-D7/A0-A6  
00001C6A  =00000030               1240  LengthOfTables          EQU     48          ; The amount of words in the segment tables
00001C6A                          1241                                              ; Used as an offset for either lives (not used) or score (used)
00001C6A                          1242                                          
00001C6A= 00000000                1243  OriginOffset            dc.l    0           ; The value added to the x coordinates for offsetting either the score or lives
00001C6E                          1244                                              ; 0 will be the value for the lives, and LEDScoreOffset for the score
00001C6E  =00000204               1245  LEDScoreOffset          EQU     516         ; Value added to x position of the score digits
00001C6E  =00000010               1246  DigitOffset             EQU     16          ; Subtract this value to put the current digit to the left of the previous
00001C6E                          1247  
00001C6E  =0000000A               1248  DivideAmount            EQU     10          ; Divide out 10 to get digits and their remainders
00001C6E  =00FFFFFF               1249  WhiteColor              EQU     $00FFFFFF   ; Hex representation of the color white for pen color
00001C6E                          1250  
00001C6E  =00000048               1251  LEDEdgeLeft             EQU     72          ; X-value on the left-side of the screen
00001C6E  =00000052               1252  LEDEdgeRight            EQU     82          ; X-value on the right-side of the screen
00001C6E  =000002D2               1253  LEDTopLeft              EQU     722
00001C6E  =000002DC               1254  LEDMidLeft              EQU     732
00001C6E  =000002E6               1255  LEDBotLeft              EQU     742
00001C6E  =000002D2               1256  LEDTopRight             EQU     722
00001C6E  =000002DC               1257  LEDMidRight             EQU     732
00001C6E  =000002E6               1258  LEDBotRight             EQU     742 
00001C6E                          1259  
00001C6E  =00000002               1260  NextWordOffset          EQU     2
00001C6E  =00000030               1261  StartingSegOffset       EQU     48                  ; Starting offset in the table to get the desired segment set
00001C6E= 00000030                1262  DynamicSegmentOffset    dc.l    StartingSegOffset   ; Dynamic offset in the table tracking current segment offset
00001C72  =00000008               1263  OffsetSubtract          EQU     8                   ; Amount of words to subtract from segment offset to get next segment
00001C72                          1264  
00001C72                          1265  LEDSegmentDisplay
00001C72  43F8 1C6A               1266      lea     OriginOffset,a1
00001C76                          1267  OuterLoop
00001C76  80FC 000A               1268      divu    #DivideAmount,d0        ; Divide out the first
00001C7A  4840                    1269      swap    d0                      ; Got first digit into 1st word of d0
00001C7C  3E00                    1270      move.w  d0,d7                   ; Move the value into a space used by the loop
00001C7E  4EB9 00001CA2           1271      jsr     InnerSetup
00001C84  0491 00000010           1272      subi.l  #DigitOffset,(a1)       ; As each digit gets printed, subtract out an offset and orientate origin
00001C8A  4240                    1273      clr.w   d0                      ; This digit is done, clear it it out
00001C8C  4840                    1274      swap    d0                      ; Swap in the remainder from the previous division
00001C8E  21FC 00000030 1C6E      1275      move.l  #StartingSegOffset,(DynamicSegmentOffset)   ; Reset the offset in the segmentWHTable to start looking at the top segment (G)
00001C96  0C80 00000000           1276      cmpi.l  #0,d0                   ; If the remainder was 0, the value is done being printed
00001C9C  6700 0084               1277      beq     FinishedSubroutine
00001CA0  60D4                    1278      bra     OuterLoop
00001CA2                          1279     
00001CA2                          1280  InnerSetup
00001CA2  48E7 FFFE               1281      movem.l AllRegisters,-(sp)      ; Save all original variables onto the stack
00001CA6  41F9 00001D24           1282      lea     segmentTable,a0
00001CAC                          1283      
00001CAC  1A30 7000               1284      move.b  (a0,d7),d5              ; This space has the binary representation of the 7-Segment LED
00001CB0  1C05                    1285      move.b  d5,d6                   ; Use this space as a place to loop and operations without destroying the binary segment representation
00001CB2                          1286  Loop
00001CB2  0286 00000001           1287      andi.l  #1,d6                   ; If 1, print the segment, otherwise shift the value out of the representation and check if done
00001CB8  6600 0006               1288      bne     DrawSegment
00001CBC  6000 002A               1289      bra     ShiftValAndCheckForDone  
00001CC0                          1290  DrawSegment
00001CC0  223C 00FFFFFF           1291      move.l  #WhiteColor,d1          
00001CC6  203C 00000050           1292      move.l  #PenColorTrap,d0
00001CCC  4E4F                    1293      trap    #15                     ; Sets the pen color to white
00001CCE  4281                    1294      clr.l   d1
00001CD0  41F9 00001D2E           1295      lea     segmentWHTable,a0
00001CD6  4EB9 00001CF6           1296      jsr     PopulateFromTable       ; Gets the line coordinates prepared for drawing
00001CDC  203C 00000054           1297      move.l  #DrawLineTrap,d0       
00001CE2  4E4F                    1298      trap    #15                     ; Draw the line that's made through PopulateFromTable
00001CE4                          1299      
00001CE4  6000 0002               1300      bra     ShiftValAndCheckForDone
00001CE8                          1301  ShiftValAndCheckForDone
00001CE8  E20D                    1302      lsr.b   #1,d5                                   ; Shift out the least significant bit
00001CEA  6700 0030               1303      beq     DoneDigit                               ; If the representation is 0, done printing segments for that digit
00001CEE  2C05                    1304      move.l  d5,d6
00001CF0  51B8 1C6E               1305      subi.l  #OffsetSubtract,DynamicSegmentOffset    ; Changes the offset value to read in the segmentWHTable
00001CF4  60BC                    1306      bra     Loop
00001CF6                          1307      
00001CF6                          1308  PopulateFromTable
00001CF6  2038 1C6E               1309      move.l  (DynamicSegmentOffset),d0   ; The holds the offset for the current segment
00001CFA  3230 0000               1310      move.w  (a0,d0),d1                  ; Get the beginning of the line's x value
00001CFE  D2B8 1C6A               1311      add.l   (OriginOffset),d1
00001D02  5480                    1312      addi.l  #NextWordOffset,d0          ; Shift the offset up to read the next word to get the next position
00001D04  3430 0000               1313      move.w  (a0,d0),d2                  ; Get the beginning of the line's y value
00001D08  5480                    1314      addi.l  #NextWordOffset,d0          ; Shift the offset up to read the next word to get the next position
00001D0A  3630 0000               1315      move.w  (a0,d0),d3                  ; Get the end of the line's x value
00001D0E  D6B8 1C6A               1316      add.l   (OriginOffset),d3       
00001D12  5480                    1317      addi.l  #NextWordOffset,d0          ; Shift the offset up to read the next word to get the next position
00001D14  3830 0000               1318      move.w  (a0,d0),d4                  ; Get the end of the line's y value
00001D18  5480                    1319      addi.l  #NextWordOffset,d0          ; Shift the offset up to read the next word to get the next position
00001D1A  4E75                    1320      rts
00001D1C                          1321  
00001D1C                          1322  DoneDigit
00001D1C  4CDF 7FFF               1323      movem.l (sp)+,AllRegisters          ; Reset original registers and fix stack pointer
00001D20  4E75                    1324      rts                                 ; Go back to OuterLoop to check if digits are done printing
00001D22                          1325  FinishedSubroutine
00001D22  4E75                    1326      rts                                 ; All digits are printed, return back
00001D24                          1327  
00001D24                          1328                                          ;      ABC DEFG
00001D24= 7E                      1329  segmentTable            dc.b    $7E     ; 0 = 0111 1110
00001D25= 30                      1330                          dc.b    $30     ; 1 = 0011 0000
00001D26= 6D                      1331                          dc.b    $6D     ; 2 = 0110 1101
00001D27= 79                      1332                          dc.b    $79     ; 3 = 0111 1001
00001D28= 33                      1333                          dc.b    $33     ; 4 = 0011 0011
00001D29= 5B                      1334                          dc.b    $5B     ; 5 = 0101 1011
00001D2A= 5F                      1335                          dc.b    $5F     ; 6 = 0101 1111
00001D2B= 70                      1336                          dc.b    $70     ; 7 = 0111 0000
00001D2C= 7F                      1337                          dc.b    $7F     ; 8 = 0111 1111
00001D2D= 7B                      1338                          dc.b    $7B     ; 9 = 0111 1011
00001D2E                          1339  
00001D2E= 0048 02D2 0052 02D2     1340  segmentWHTable          dc.w    LEDEdgeLeft,LEDTopLeft,LEDEdgeRight,LEDTopRight     ; Top left to top right   (A)
00001D36= 0052 02D2 0052 02DC     1341                          dc.w    LEDEdgeRight,LEDTopRight,LEDEdgeRight,LEDMidRight   ; Top right to mid right  (B)
00001D3E= 0052 02DC 0052 02E6     1342                          dc.w    LEDEdgeRight,LEDMidRight,LEDEdgeRight,LEDBotRight   ; Mid right top bot right (C)
00001D46= 0048 02E6 0052 02E6     1343                          dc.w    LEDEdgeLeft,LEDBotRight,LEDEdgeRight,LEDBotLeft     ; Bot right to bot left   (D)
00001D4E= 0048 02E6 0048 02DC     1344                          dc.w    LEDEdgeLeft,LEDBotLeft,LEDEdgeLeft,LEDMidLeft       ; Bot left to mid left    (E)
00001D56= 0048 02DC 0048 02D2     1345                          dc.w    LEDEdgeLeft,LEDMidLeft,LEDEdgeLeft,LEDTopLeft       ; Mid left to top left    (F)
00001D5E= 0048 02DC 0052 02DC     1346                          dc.w    LEDEdgeLeft,LEDMidLeft,LEDEdgeRight,LEDMidRight     ; Mid left to mid right   (G)
00001D66                          1347  
00001D66                          1348  
00001D66                          1349  
00001D66                          1350  
00001D66                          1351  -------------------- end include --------------------
00001D66                          1352  poweruphandler  INCLUDE "powerups.x68"
00001D66                          1353  EnableDoubleScore
00001D66  13FC 0001 001BC55C      1354      move.b  #1, (DoubleScoreCollected)      ; Sets the collected bool to true
00001D6E  4EB8 13C8               1355      jsr     InvalDoubleScore                ; Remove the powerup from the scene to prevent double collection
00001D72  4EB8 1AD8               1356      jsr     ShowDoubleScoreText             ; UI indicator in the black bar part of the screen
00001D76  4EB9 00001E66           1357      jsr     PlayPowerup                     ; Sound
00001D7C  4E75                    1358      rts
00001D7E                          1359     
00001D7E                          1360  EnableSpeedPaddle
00001D7E  13FC 0001 001BC55D      1361      move.b  #1, (PaddleSpeedCollected)      ; Sets the collected bool to true
00001D86  4EB8 1408               1362      jsr     InvalPaddleSpeed                ; Remove the powerup from the scene to prevent double collection
00001D8A  4EB8 1AF8               1363      jsr     ShowPaddleSpeedText             ; UI indicator in the black bar part of the screen
00001D8E  4EB9 00001E66           1364      jsr     PlayPowerup                     ; Sound
00001D94  4E75                    1365      rts
00001D96                          1366      
00001D96                          1367  DisablePowerups
00001D96  4239 001BC55C           1368      clr.b   (DoubleScoreCollected)
00001D9C  4239 001BC55D           1369      clr.b   (PaddleSpeedCollected)
00001DA2  4E75                    1370      rts
00001DA4                          1371  
00001DA4                          1372  
00001DA4                          1373  -------------------- end include --------------------
00001DA4                          1374  soundhandler    INCLUDE "musicandsound.x68"
00001DA4                          1375  AllRegisters                    REG     D0-D7/A0-A6
00001DA4                          1376  
00001DA4  =00000000               1377  PlayOnceValue                   EQU     0
00001DA4  =00000001               1378  LoopingValue                    EQU     1       ; Used in Trap 76 for looping a sound
00001DA4  =00000002               1379  StoppingValue                   EQU     2       ; Used in Trap 76 for stopping a sound
00001DA4                          1380  
00001DA4  =00000000               1381  MainPosition                    EQU     0
00001DA4  =00000001               1382  PaddleWallSoundPosition         EQU     1
00001DA4  =00000002               1383  ExplodeBrickSoundPosition       EQU     2
00001DA4  =00000003               1384  PowerupSoundPosition            EQU     3
00001DA4  =00000004               1385  GameWinPosition                 EQU     4
00001DA4  =00000005               1386  GameLosePosition                EQU     5
00001DA4                          1387  
00001DA4                          1388  LoadSounds
00001DA4  48E7 FFFE               1389      movem.l AllRegisters,-(sp)          ; Save all original variables onto the stack
00001DA8                          1390                                          ; This allows the use of d0-d7 as temporary spaces now
00001DA8                          1391                                          
00001DA8  43F9 001BC141           1392      lea     PaddleWallSound,a1
00001DAE  203C 0000004A           1393      move.l  #LoadWAVDirectTrap,d0
00001DB4  123C 0001               1394      move.b  #PaddleWallSoundPosition,d1
00001DB8  4E4F                    1395      trap    #15
00001DBA                          1396      
00001DBA  43F9 001BC14F           1397      lea     ExplodeBrickSound,a1
00001DC0  203C 0000004A           1398      move.l  #LoadWAVDirectTrap,d0      ; Need to move this in again because of the Trap's post-condition
00001DC6  123C 0002               1399      move.b  #ExplodeBrickSoundPosition,d1
00001DCA  4E4F                    1400      trap    #15
00001DCC                          1401      
00001DCC  43F9 001BC160           1402      lea     PowerupSound,a1
00001DD2  203C 0000004A           1403      move.l  #LoadWAVDirectTrap,d0      ; Need to move this in again because of the Trap's post-condition
00001DD8  123C 0003               1404      move.b  #PowerupSoundPosition,d1
00001DDC  4E4F                    1405      trap    #15
00001DDE                          1406      
00001DDE  43F9 001BC132           1407      lea     MainMusic,a1
00001DE4  203C 00000047           1408      move.l  #LoadWAVNonDirectTrap,d0   ; Use Standard Controller for music so it can be looped and not interrupted by SFX       
00001DEA  123C 0000               1409      move.b  #MainPosition,d1
00001DEE  4E4F                    1410      trap    #15
00001DF0                          1411      
00001DF0  43F9 001BC171           1412      lea     GameWinMusic,a1
00001DF6  203C 00000047           1413      move.l  #LoadWAVNonDirectTrap,d0   ; Use Standard Controller for music so it can be looped and not interrupted by SFX       
00001DFC  123C 0004               1414      move.b  #GameWinPosition,d1
00001E00  4E4F                    1415      trap    #15
00001E02                          1416      
00001E02  43F9 001BC182           1417      lea     GameLoseMusic,a1
00001E08  203C 00000047           1418      move.l  #LoadWAVNonDirectTrap,d0   ; Use Standard Controller for music so it can be looped and not interrupted by SFX       
00001E0E  123C 0005               1419      move.b  #GameLosePosition,d1
00001E12  4E4F                    1420      trap    #15
00001E14                          1421      
00001E14                          1422      
00001E14  4CDF 7FFF               1423      movem.l (sp)+,AllRegisters          ; Reset original registers and fix stack pointer 
00001E18  4E75                    1424      rts
00001E1A                          1425      
00001E1A                          1426  PlayMusic
00001E1A  4EB9 00001EB4           1427      jsr     StopGameEndMusic
00001E20  203C 0000004C           1428      move.l  #StandardPlayerTrap,d0
00001E26  7200                    1429      move.l  #MainPosition,d1
00001E28  7401                    1430      move.l  #LoopingValue,d2
00001E2A  4E4F                    1431      trap    #15
00001E2C  4E75                    1432      rts
00001E2E                          1433     
00001E2E                          1434  PlayPaddleWall
00001E2E  48E7 FFFE               1435      movem.l AllRegisters,-(sp)          ; Save all original variables onto the stack
00001E32                          1436                                          ; This allows the use of d0-d7 as temporary spaces now
00001E32  43F9 001BC141           1437      lea     PaddleWallSound,a1
00001E38  123C 0001               1438      move.b  #PaddleWallSoundPosition,d1
00001E3C  203C 0000004B           1439      move.l  #PlayWAVDirectTrap,d0
00001E42  4E4F                    1440      trap    #15    
00001E44                          1441      
00001E44  4CDF 7FFF               1442      movem.l (sp)+,AllRegisters          ; Reset original registers and fix stack pointer
00001E48  4E75                    1443      rts
00001E4A                          1444  
00001E4A                          1445  PlayBrickExplode
00001E4A  48E7 FFFE               1446      movem.l AllRegisters,-(sp)          ; Save all original variables onto the stack
00001E4E                          1447                                          ; This allows the use of d0-d7 as temporary spaces now
00001E4E  43F9 001BC14F           1448      lea     ExplodeBrickSound,a1
00001E54  123C 0002               1449      move.b  #ExplodeBrickSoundPosition,d1
00001E58  203C 0000004B           1450      move.l  #PlayWAVDirectTrap,d0
00001E5E  4E4F                    1451      trap    #15    
00001E60                          1452      
00001E60  4CDF 7FFF               1453      movem.l (sp)+,AllRegisters          ; Reset original registers and fix stack pointer
00001E64  4E75                    1454      rts
00001E66                          1455      
00001E66                          1456  PlayPowerup
00001E66  48E7 FFFE               1457      movem.l AllRegisters,-(sp)          ; Save all original variables onto the stack
00001E6A                          1458                                          ; This allows the use of d0-d7 as temporary spaces now
00001E6A  43F9 001BC160           1459      lea     PowerupSound,a1
00001E70  123C 0003               1460      move.b  #PowerupSoundPosition,d1
00001E74  203C 0000004B           1461      move.l  #PlayWAVDirectTrap,d0
00001E7A  4E4F                    1462      trap    #15    
00001E7C                          1463      
00001E7C  4CDF 7FFF               1464      movem.l (sp)+,AllRegisters          ; Reset original registers and fix stack pointer
00001E80  4E75                    1465      rts
00001E82                          1466  
00001E82                          1467  StopMusic
00001E82  203C 0000004C           1468      move.l  #StandardPlayerTrap,d0
00001E88  7200                    1469      move.l  #MainPosition,d1
00001E8A  7402                    1470      move.l  #StoppingValue,d2
00001E8C  4E4F                    1471      trap    #15
00001E8E  4E75                    1472      rts
00001E90                          1473      
00001E90                          1474  PlayVictoryMusic
00001E90  4EB8 1E82               1475      jsr     StopMusic
00001E94  203C 0000004C           1476      move.l  #StandardPlayerTrap,d0
00001E9A  7204                    1477      move.l  #GameWinPosition,d1
00001E9C  7400                    1478      move.l  #PlayOnceValue,d2
00001E9E  4E4F                    1479      trap    #15
00001EA0  4E75                    1480      rts
00001EA2                          1481  
00001EA2                          1482  PlayDefeatMusic
00001EA2  4EB8 1E82               1483      jsr     StopMusic
00001EA6  203C 0000004C           1484      move.l  #StandardPlayerTrap,d0
00001EAC  7205                    1485      move.l  #GameLosePosition,d1
00001EAE  7400                    1486      move.l  #PlayOnceValue,d2
00001EB0  4E4F                    1487      trap    #15
00001EB2  4E75                    1488      rts
00001EB4                          1489      
00001EB4                          1490  StopGameEndMusic
00001EB4  203C 0000004C           1491      move.l  #StandardPlayerTrap,d0
00001EBA  7204                    1492      move.l  #GameWinPosition,d1
00001EBC  7402                    1493      move.l  #StoppingValue,d2
00001EBE  4E4F                    1494      trap    #15
00001EC0  7205                    1495      move.l  #GameLosePosition,d1
00001EC2  203C 0000004C           1496      move.l  #StandardPlayerTrap,d0
00001EC8  4E4F                    1497      trap    #15
00001ECA  4E75                    1498      rts
00001ECA  4E75                    1499  -------------------- end include --------------------
00001ECC                          1500  
00001ECC                          1501  *File offsets for bmp file format*
00001ECC  =00000012               1502  WidthFileOffset         EQU     $12
00001ECC  =00000016               1503  HeightFileOffset        EQU     $16
00001ECC                          1504  
00001ECC                          1505  *Fixed Point Land*
00001ECC  =00000003               1506  LandShiftAmount         EQU     3           ; Shift by the land shift to get the correct pixel location
00001ECC                          1507  
00001ECC                          1508  *Arguments for player drawing*
00001ECC  =00000040               1509  PaddleWidth             EQU     64          ; Width
00001ECC  =00000008               1510  PaddleHeight            EQU     8           ; Height
00001ECC  =000008E4               1511  PlayerStartingPosX      EQU     2276        ; Character initial X position
00001ECC  =00000265               1512  LocationScreenY         EQU     613         ; Initial offset for height drawing location
00001ECC  =00000025               1513  PaddleVelocity          EQU     37          ; Static character velocity in 2^-3 land
00001ECC  =0000000D               1514  VelocityToAdd           EQU     13          ; Added velocity after powerup collected
00001ECC  =00FFF200               1515  PaddleColor             EQU     $00FFF200   ; Color of the collider for the paddle
00001ECC  =00000000               1516  BlackColor              EQU     $00000000   ; Value to swap to after filling in rectangle drawing
00001ECC                          1517  
00001ECC                          1518  *Default corner drawing, always draw the image starting from the top-left*
00001ECC                          1519  *This eliminates multiple equates that are using the same values
00001ECC  =00000000               1520  DefaultCornerX          EQU     0
00001ECC  =00000000               1521  DefaultCornerY          EQU     0
00001ECC                          1522  
00001ECC                          1523  *Arguments for game background drawing*
00001ECC  =00000280               1524  BGWidthDisplay          EQU     640         ; Width
00001ECC  =000002BC               1525  BGHeightDisplay         EQU     700         ; Height
00001ECC  =00000000               1526  BGLocationScreenX       EQU     0           ; Initial offset for width drawing location
00001ECC  =00000000               1527  BGLocationScreenY       EQU     0           ; Initial offset for height drawing location
00001ECC  =00000032               1528  BottomBlackBarOffset    EQU     50          ; Offset to the height to have a black bar at the bottom for score/time
00001ECC                          1529  
00001ECC                          1530  *Ball information*
00001ECC  =0000000C               1531  BallWidthDisplay        EQU     12          ; Width
00001ECC  =0000000C               1532  BallHeightDisplay       EQU     12          ; Height
00001ECC  =000009C0               1533  BallLocationScreenX     EQU     2496        ; Initial offset for width drawing location (in 2^-3 land)
00001ECC  =00000AB4               1534  BallLocationScreenY     EQU     2740        ; Initial offset for height drawing location (in 2^-3 land)
00001ECC  =00000001               1535  BallStartingVelocityX   EQU     1
00001ECC  =0000000A               1536  BallStartingVelocityY   EQU     10
00001ECC  =00000038               1537  BallVelocityYRef        EQU     56          ; Reference to the magnitude of the velocity 
00001ECC  =00000008               1538  AmountOfBalls           EQU     8           ; Do not change -- helps the randomization for balls
00001ECC                          1539  
00001ECC                          1540  *Arguments for brick drawing*
00001ECC  =00000028               1541  BrickWidthDisplay       EQU     40          ; Width
00001ECC  =00000014               1542  BrickHeightDisplay      EQU     20          ; Height
00001ECC  =00000028               1543  StartingXPosition       EQU     40          ; First x-position to print a brick
00001ECC  =0000001C               1544  StartingYPosition       EQU     28          ; First y-position to print a brick
00001ECC                          1545  ; Locations are set within DrawBricks
00001ECC                          1546  
00001ECC                          1547  *Brick Information*
00001ECC  =0044FF00               1548  InnerGreenBrickColor    EQU     $0044FF00   ; Used for collision with ball
00001ECC  =0000FFF6               1549  InnerYellowBrickColor   EQU     $0000FFF6   ; Used for collision with ball
00001ECC  =00000001               1550  GreenBrickScore         EQU     1
00001ECC  =0000000A               1551  YellowBrickScore        EQU     10
00001ECC  =00000001               1552  BrickScoreShift         EQU     1           ; Shift by this amount when doubling/reducing the score
00001ECC                          1553  
00001ECC                          1554  *Powerups* (All are 30x30 sprites)
00001ECC  =0000001E               1555  PowerupWidthDisplay     EQU     30
00001ECC  =0000001E               1556  PowerupHeightDisplay    EQU     30  
00001ECC                          1557  *2x Score*
00001ECC  =00000055               1558  DoubleLocationScreenX   EQU     85   
00001ECC  =00000019               1559  DoubleLocationScreenY   EQU     25       
00001ECC  =000000FF               1560  DoubleColor             EQU     $000000FF   ; Color of the collider for the powerup
00001ECC                          1561  *PaddleSpeedIncrease*
00001ECC  =0000020D               1562  SpeedLocationScreenX    EQU     BGWidthDisplay-DoubleLocationScreenX-PowerupWidthDisplay   
00001ECC  =00000019               1563  SpeedLocationScreenY    EQU     DoubleLocationScreenY   ; Align this powerup with the DoubleScore one       
00001ECC  =00A41E9B               1564  SpeedColor              EQU     $00A41E9B               ; Color of the collider for the powerup
00001ECC                          1565  
00001ECC                          1566  *ASCII Representations For String Printing*
00001ECC  =0000000D               1567  CR                      EQU     $0D         ; ASCII for Carriage Return
00001ECC  =0000000A               1568  LF                      EQU     $0A         ; ASCII for Line Feed
00001ECC                          1569  
00001ECC                          1570  *Character Default Statistics*
00001ECC  =00000003               1571  MaxLives                EQU     3
00001ECC  =00000000               1572  StartingScore           EQU     0
00001ECC                          1573  
00001ECC                          1574  *Sound Reference Values*
00001ECC  =00000000               1575  MainMenu                EQU     0
00001ECC  =00000001               1576  BrickDestroy            EQU     1
00001ECC  =00000002               1577  PowerupCollect          EQU     2
00001ECC                          1578  
00001ECC                          1579  *Trap Code References*
00001ECC  =00000008               1580  GetTimeTrap             EQU     8
00001ECC  =0000000B               1581  ClearScreenTrap         EQU     11
00001ECC  =0000FF00               1582  ClearScreenMagicVal     EQU     $FF00
00001ECC  =00000011               1583  DoubleBufferingVal      EQU     17          ; Value to set d1.b to to enable double buffering (with Trap 95)
00001ECC  =00000013               1584  UserInputTrap           EQU     19
00001ECC  =00000017               1585  DelayTrap               EQU     23
00001ECC  =000000C8               1586  DelayTime               EQU     200         ; Amount of time the player must wait after losing a life
00001ECC  =00000021               1587  OutputResTrap           EQU     33
00001ECC  =00000047               1588  LoadWAVNonDirectTrap    EQU     71          ; Load the music file into the sound memory
00001ECC  =0000004A               1589  LoadWAVDirectTrap       EQU     74          ; Load the music file into DirectX sound memory
00001ECC  =0000004B               1590  PlayWAVDirectTrap       EQU     75          ; Plays sounds loaded with above trap code
00001ECC  =0000004C               1591  StandardPlayerTrap      EQU     76          ; Plays sounds loaded with trap code 71
00001ECC  =00000050               1592  PenColorTrap            EQU     80
00001ECC  =00000051               1593  FillColorTrap           EQU     81
00001ECC  =00000052               1594  DrawPixelTrap           EQU     82
00001ECC  =00000053               1595  GetPixelColorTrap       EQU     83
00001ECC  =00000054               1596  DrawLineTrap            EQU     84
00001ECC  =00000057               1597  DrawRectangleTrap       EQU     87
00001ECC  =00000058               1598  DrawCircleTrap          EQU     88
00001ECC  =0000005C               1599  SetDrawingModeTrap      EQU     92
00001ECC  =0000005E               1600  RepaintFromBufferTrap   EQU     94  
00001ECC  =0000005F               1601  DrawTextTrap            EQU     95  
00001ECC                          1602      
00001ECC                          1603  START:
00001ECC  4EB8 1810               1604      jsr     SeedRandomNumber                ; Seed the random number only once at the start and use it later
00001ED0  4EB8 187E               1605      jsr     SetResolution
00001ED4  4EB8 1DA4               1606      jsr     LoadSounds                      ; Loads WAVs into sound memory
00001ED8  4EB8 1894               1607      jsr     SetDoubleBuffering
00001EDC                          1608  TitleAndLoadingScreens
00001EDC  4EB8 1928               1609      jsr     ShowStartingScreen
00001EE0  4EB8 19B8               1610      jsr     ShowLegend
00001EE4  4EB8 196C               1611      jsr     StartScreenInput
00001EE8  4EB8 1A74               1612      jsr     ShowLoadingScreen
00001EEC                          1613      
00001EEC                          1614  *Set the game up for the game loop, initializing goes here*
00001EEC                          1615  GameInitialSetup
00001EEC  4EB8 18B8               1616      jsr     ResetGame           ; UI, LEDs, Powerups, Initial ball/player and brick layout
00001EF0                          1617  
00001EF0                          1618  GameLoop
00001EF0  4EB8 11E8               1619      jsr     InvalPlayer
00001EF4  4EB8 10CE               1620      jsr     PlayerInput
00001EF8  4EB8 119A               1621      jsr     DrawPlayer
00001EFC                          1622      
00001EFC  4EB8 14AE               1623      jsr     UpdateBall          ; Inval ball, update ball's position, check for collisions
00001F00  4EB8 1276               1624      jsr     DrawBall
00001F04  4EB8 1C00               1625      jsr     UpdateLED           ; Updates both LEDs
00001F08                          1626      
00001F08  4EB8 18B0               1627      jsr     SwapBuffer
00001F0C  60E2                    1628      bra     GameLoop
00001F0E                          1629  
00001F0E                          1630  End
00001F0E  FFFF FFFF               1631      SIMHALT                     ; Halt program
00001F12                          1632      
00001F12                          1633  *Labels*
00001F12                          1634  *BMP Files that must be drawn*
00001F12                          1635  Background                  INCBIN  "Bitmaps\Background.bmp"
001B774A                          1636  GreenBrick                  INCBIN  "Bitmaps\GreenBrick.bmp"
001B8402                          1637  YellowBrick                 INCBIN  "Bitmaps\YellowBrick.bmp"
001B90BA                          1638  DoublePowerup               INCBIN  "Bitmaps\Double.bmp"
001B9F02                          1639  PaddleSpeed                 INCBIN  "Bitmaps\PaddleSpeed.bmp"
001BAD4A                          1640  Ball1                       INCBIN  "Bitmaps\Ball1.bmp"
001BAFC2                          1641  Ball2                       INCBIN  "Bitmaps\Ball2.bmp"
001BB23A                          1642  Ball3                       INCBIN  "Bitmaps\Ball3.bmp"
001BB4B2                          1643  Ball4                       INCBIN  "Bitmaps\Ball4.bmp"
001BB72A                          1644  Ball5                       INCBIN  "Bitmaps\Ball5.bmp"
001BB9A2                          1645  Ball6                       INCBIN  "Bitmaps\Ball6.bmp"
001BBC1A                          1646  Ball7                       INCBIN  "Bitmaps\Ball7.bmp"
001BBE92                          1647  Ball8                       INCBIN  "Bitmaps\Ball8.bmp"
001BC10A= 001BAD4A 001BAFC2 ...   1648  Balls                       dc.l    Ball1,Ball2,Ball3,Ball4,Ball5,Ball6,Ball7,Ball8
001BC12A                          1649  RandomValue                 ds.l    1                       ; Location to hold random number from generator
001BC12E= 00000000                1650  RandomlyChosenBall          dc.l    0                       ; Holds address to the randomly chosen ball of 8
001BC132                          1651  *WAV Files*
001BC132= 57 41 56 73 5C 6D ...   1652  MainMusic                   dc.b    'WAVs\music.wav',0
001BC141= 57 41 56 73 5C 62 ...   1653  PaddleWallSound             dc.b    'WAVs\bonk.wav',0
001BC14F= 57 41 56 73 5C 65 ...   1654  ExplodeBrickSound           dc.b    'WAVs\explode.wav',0
001BC160= 57 41 56 73 5C 70 ...   1655  PowerupSound                dc.b    'WAVs\powerup.wav',0
001BC171= 57 41 56 73 5C 67 ...   1656  GameWinMusic                dc.b    'WAVs\gamewin.wav',0
001BC182= 57 41 56 73 5C 67 ...   1657  GameLoseMusic               dc.b    'WAVs\gamelose.wav',0
001BC194                          1658  *UI Text*
001BC194= 57 65 6C 63 6F 6D ...   1659  TitleText                   dc.b    'Welcome to Epic Brick Break!',0
001BC1B1= 50 72 65 73 73 20 ...   1660  StartText                   dc.b    'Press Spacebar to start!',0
001BC1CA= 50 72 65 73 73 20 ...   1661  QuitText                    dc.b    'Press Q to quit the game.',0
001BC1E4= 59 6F 75 72 20 67 ...   1662  GoalText                    dc.b    'Your goal is to get the most amount of points without losing all your lives!',0
001BC231= 3D 20 31 20 70 6F ...   1663  GreenBrickText              dc.b    '= 1 point',0
001BC23B= 3D 20 31 30 20 70 ...   1664  YellowBrickText             dc.b    '= 10 points',0
001BC247= 3D 20 44 6F 75 62 ...   1665  DoubleScoreInfoText         dc.b    '= Doubles point value of bricks',0
001BC267= 3D 20 49 6E 63 72 ...   1666  PaddleSpeedInfoText         dc.b    '= Increases your paddle speed',0
001BC285= 43 6F 6C 6C 65 63 ...   1667  PowerupsText                dc.b    'Collect the following powerups to help you score more points!',0
001BC2C3= 54 68 61 6E 6B 73 ...   1668  ThanksText                  dc.b    'Thanks for playing!',0
001BC2D7= 47 61 6D 65 20 4F ...   1669  GameOverText                dc.b    'Game Over!',0
001BC2E2= 43 6F 6E 67 72 61 ...   1670  GameWinText                 dc.b    'Congratulations! You have destroyed all the bricks!',0
001BC316= 50 72 65 73 73 20 ...   1671  PlayAgainText               dc.b    'Press Spacebar to play again!',0
001BC334= 4C 6F 61 64 69 6E ...   1672  LoadingText                 dc.b    'Loading... ',0 
001BC340= 00000000                1673  LoadingTextPos              dc.l    0                       ; 0   starting * 8 (2^-3 land) = 0
001BC344= 4C 69 76 65 73 3A 00    1674  LivesText                   dc.b    'Lives:',0
001BC34B= 53 63 6F 72 65 3A 00    1675  ScoreText                   dc.b    'Score:',0 
001BC352= 32 78 20 53 63 6F ...   1676  DoubleScoreText             dc.b    '2x Score Activated!',0   
001BC366= 45 78 74 72 61 20 ...   1677  PaddleSpeedText             dc.b    'Extra Paddle Speed!',0   
001BC37A                          1678  *Position information about player/ball/bricks*
001BC37A= 01                      1679  HaveHadNoInput              dc.b    1                       ; Boolean to indicate when the player inputs for character movement
001BC37C= 000008E4                1680  CharXCoordinateLeftCurr     dc.l    PlayerStartingPosX      ; Start the character near the center of the ball
001BC380= 000009C0                1681  BallLeftPosCurr             dc.l    BallLocationScreenX     ; Ball's left position
001BC384= 00000AB4                1682  BallTopPosCurr              dc.l    BallLocationScreenY     ; Ball's top position
001BC388= 00000001                1683  BallVelocityX               dc.l    BallStartingVelocityX   ; Dynamic character velocity in 2^-3 land
001BC38C= 0000000A                1684  BallVelocityY               dc.l    BallStartingVelocityY   ; Dynamic character velocity in 2^-3 land
001BC390= 00000000                1685  Score                       dc.l    StartingScore           
001BC394= 00000070                1686  BrickCounter                dc.l    AmountOfBricks          ; Counts how many bricks were destroyed -- used for game win
001BC398= 00000003                1687  Lives                       dc.l    MaxLives                
001BC39C= 00000000 00000000 ...   1688  BrickArray                  dcb.l   AmountOfBricks,$0       
001BC55C= 00                      1689  DoubleScoreCollected        dc.b    0                       ; Boolean to determine if the 2x score powerup has been collected
001BC55D= 00                      1690  PaddleSpeedCollected        dc.b    0                       ; Boolean to determine if the extra paddle speed powerup has been collected
001BC55E= 00000028 00000028 ...   1691  BallVelocityPaddleTable     dc.l    40,40,40,40,38,38,38,36,36,34,32,30,28,26,24,24,22,22,22,20,16,12,10,10,8,8,6,6,4,4,4,4
001BC5DE= FFFFFFFC FFFFFFFC ...   1692                              dc.l    -4,-4,-4,-4,-6,-6,-8,-8,-10,-10,-12,-16,-20,-22,-22,-22,-22,-24,-26,-28,-30
001BC632= FFFFFFE0 FFFFFFDE ...   1693                              dc.l    -32,-34,-36,-36,-38,-38,-38,-40,-40,-40,-40                             
001BC65E                          1694      END    START            ; Last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACCELERATELOADINGTEXT  1A8E
ADDGREENTOSCORE     1BA8
ADDPADDLEVELOCITY   1144
ADDRESSANDSTACKTIDYING  10A6
ADDSCORE            1BB2
ADDYELLOWTOSCORE    1B9A
ALLREGISTERS        7FFF
ALL_REG             7FFF
AMOUNTOFBALLS       8
AMOUNTOFBRICKS      70
AMOUNTOFSPACE       8
BACKGROUND          1F12
BALL1               1BAD4A
BALL2               1BAFC2
BALL3               1BB23A
BALL4               1BB4B2
BALL5               1BB72A
BALL6               1BB9A2
BALL7               1BBC1A
BALL8               1BBE92
BALLHANDLER         148E
BALLHEIGHTDISPLAY   C
BALLLEFTPOSCURR     1BC380
BALLLOCATIONSCREENX  9C0
BALLLOCATIONSCREENY  AB4
BALLS               1BC10A
BALLSTARTINGVELOCITYX  1
BALLSTARTINGVELOCITYY  A
BALLTOPPOSCURR      1BC384
BALLVELOCITYPADDLETABLE  1BC55E
BALLVELOCITYX       1BC388
BALLVELOCITYY       1BC38C
BALLVELOCITYYREF    38
BALLWIDTHDISPLAY    C
BGHEIGHTDISPLAY     2BC
BGLOCATIONSCREENX   0
BGLOCATIONSCREENY   0
BGWIDTHDISPLAY      280
BITMAPDRAWING       1000
BLACKCOLOR          0
BOTTOMBLACKBAROFFSET  32
BOTTOMCOLLISION     16B2
BOTTOMGREEN         16AC
BOTTOMVELOCITYCHANGE  16B8
BOTTOMYELLOW        16A2
BRICKARRAY          1BC39C
BRICKCOUNTER        1BC394
BRICKCOUNTEROFFSET  0
BRICKDESTROY        1
BRICKDRAW           12BA
BRICKHANDLER        1766
BRICKHEIGHTDISPLAY  14
BRICKHEIGHTOFFSET   8
BRICKINROWSTARTERVALUE  1BC
BRICKLOCATIONOFFSET  4
BRICKROWOFFSET      0
BRICKROWOFFSETSTARTER  1BE
BRICKSCORESHIFT     1
BRICKSPERROW        E
BRICKWIDTHDISPLAY   28
BYTESWAP            1000
BYTESWAPHEIGHT      1024
BYTESWAPPIXELARRAY  100E
BYTESWAPWIDTH       101A
CHARXCOORDINATELEFTCURR  1BC37C
CHECKFORWIN         16C4
CHECKFORYELLOWBRICKDRAW  12BA
CLEARSCREEN         18A2
CLEARSCREENMAGICVAL  FF00
CLEARSCREENTRAP     B
COLLISIONCHECK      14AE
CORNERDISPLAYXREF   8
CORNERDISPLAYYREF   C
COUNTER             12
COUNTERANDCOORDINATESETUP  1060
CR                  D
DECREMENTLIVES      1BC6
DEFAULTCORNERX      0
DEFAULTCORNERY      0
DELAYTIME           C8
DELAYTRAP           17
DIGITOFFSET         10
DISABLEPOWERUPS     1D96
DIVIDEAMOUNT        A
DONE                10AE
DONEDIGIT           1D1C
DONTDRAW            1348
DOUBLEBUFFERINGVAL  11
DOUBLECOLOR         FF
DOUBLELOCATIONSCREENX  55
DOUBLELOCATIONSCREENY  19
DOUBLEPOWERUP       1B90BA
DOUBLESCOREBOTTOMOFFSET  163
DOUBLESCORECOLLECTED  1BC55C
DOUBLESCOREINFOBOTTOMOFFSET  FFFFFFA3
DOUBLESCOREINFOLEFTOFFSET  14
DOUBLESCOREINFOTEXT  1BC247
DOUBLESCORELEFTOFFSET  4B
DOUBLESCORETEXT     1BC352
DOUBLESCOREXPOSITION  FF
DOUBLESCOREYPOSITION  1B3
DRAWBACKGROUNDFULL  1156
DRAWBALL            1276
DRAWBALLINITIAL     1266
DRAWBITMAP          1008
DRAWBRICKS          1766
DRAWCIRCLETRAP      58
DRAWDOUBLESCORE     1370
DRAWINGLOOP         1072
DRAWLINETRAP        54
DRAWPADDLESPEED     139C
DRAWPIXEL           1086
DRAWPIXELTRAP       52
DRAWPLAYER          119A
DRAWPLAYERINITIAL   1190
DRAWPOWERUPS        1370
DRAWRECTANGLETRAP   57
DRAWSEGMENT         1CC0
DRAWTEXTTRAP        5F
DRAWUITEXT          1AB0
DYNAMICSEGMENTOFFSET  1C6E
ENABLEDOUBLESCORE   1D66
ENABLESPEEDPADDLE   1D7E
END                 1F0E
ENDGAMEINPUT        1B74
ENDGAMELOOP         1B76
EXPLODEBRICKSOUND   1BC14F
EXPLODEBRICKSOUNDPOSITION  2
FILLCOLORTRAP       51
FINDBRICKINROW      17EC
FINDBRICKINROWLOOP  17F6
FINDBRICKPOSITION   17CE
FINDROWBRICK        17DE
FINISHDRAW          12F2
FINISHEARLY         134A
FINISHEDSUBROUTINE  1D22
FIRSTCOL            28
FOUNDBRICK          1804
FOURTHCOL           230
GAMEINITIALSETUP    1EEC
GAMELOOP            1EF0
GAMELOSEMUSIC       1BC182
GAMELOSEPOSITION    5
GAMEOVERBOTTOMOFFSET  19
GAMEOVERLEFTOFFSET  28
GAMEOVERSETUP       1C3E
GAMEOVERTEXT        1BC2D7
GAMEWINLEFTOFFSET   C8
GAMEWINMUSIC        1BC171
GAMEWINPOSITION     4
GAMEWINSETUP        1C54
GAMEWINTEXT         1BC2E2
GETPIXELCOLORTRAP   53
GETRANDOMBYTEINTOD6  1828
GETTIMETRAP         8
GETVELOCITY         1132
GOALBOTTOMOFFSET    19
GOALLEFTOFFSET      130
GOALTEXT            1BC1E4
GOBACKLEFTOFFSET    73
GREENBRICK          1B774A
GREENBRICKSCORE     1
GREENBRICKTEXT      1BC231
GREENBRICKTEXTBOTTOMOFFSET  FFFFFFFD
GREENBRICKTEXTLEFTOFFSET  14
GREENBRICKXPOSITION  FA
GREENBRICKYPOSITION  15E
HAVEHADNOINPUT      1BC37A
HEIGHTCOORDOFFSET   4
HEIGHTDISPLAYREF    1C
HEIGHTFILEOFFSET    16
HEIGHTFILEOFFSETREF  18
HEIGHTSHIFTUP       102E
HEIGHTWORDOFFSET    2
HITPADDLE           1624
HORIZONTALCOLLISIONOFFSET  1
INITIALIZESPACEAMOUNT  8
INNERGREENBRICKCOLOR  44FF00
INNERSETUP          1CA2
INNERYELLOWBRICKCOLOR  FFF6
INPUTHANDLER        10B6
INPUTMOVEMENTSETUP  10B6
INPUTUISETUP        10C2
INVALBALL           122C
INVALBRICK          134C
INVALDOUBLESCORE    13C8
INVALHANDLER        1156
INVALLED            1448
INVALPADDLESPEED    1408
INVALPLAYER         11E8
INVALPLAYEREXTRABITS  2
KEYLEFTINPUT        25
KEYRIGHTINPUT       27
LANDSHIFTAMOUNT     3
LEDBOTLEFT          2E6
LEDBOTRIGHT         2E6
LEDEDGELEFT         48
LEDEDGERIGHT        52
LEDMIDLEFT          2DC
LEDMIDRIGHT         2DC
LEDSCOREOFFSET      204
LEDSEGMENT          1C6A
LEDSEGMENTDISPLAY   1C72
LEDTOPLEFT          2D2
LEDTOPRIGHT         2D2
LEFTINPUT           1120
LENGTHOFTABLES      30
LF                  A
LIVES               1BC398
LIVESANDSCORE       1B9A
LIVESLEFTOFFSET     F
LIVESTEXT           1BC344
LOADGREEN           12E2
LOADINGLEFTOFFSET   28
LOADINGSCREENACCELERATION  1
LOADINGSCREENLANDSHIFT1  8
LOADINGSCREENLANDSHIFT2  3
LOADINGSCREENSTARTVELOCITY  2
LOADINGTEXT         1BC334
LOADINGTEXTPOS      1BC340
LOADINGTEXTSTOPLOCATION  87000
LOADSOUNDS          1DA4
LOADWAVDIRECTTRAP   4A
LOADWAVNONDIRECTTRAP  47
LOADYELLOW          12EC
LOCATIONSCREENXREF  20
LOCATIONSCREENY     265
LOCATIONSCREENYREF  24
LONGBYTEOFFSET      4
LOOP                1CB2
LOOPBEGIN           1786
LOOPINGVALUE        1
MAINMENU            0
MAINMUSIC           1BC132
MAINPOSITION        0
MAXLIVES            3
NEXTWORDOFFSET      2
NINC0               183E
NINC1               1846
NOINPUT             114C
NONEGATIVESETHORIZONTAL  16F4
NONEGATIVESETVERTICAL  1722
NOPOSITIVESETHORIZONTAL  1706
NOPOSITIVESETVERTICAL  173A
OFFSETSUBTRACT      8
ORIGINOFFSET        1C6A
OUTERLOOP           1C76
OUTPUTRESTRAP       21
PADDLECOLOR         FFF200
PADDLEHEIGHT        8
PADDLESPEED         1B9F02
PADDLESPEEDBOTTOMOFFSET  177
PADDLESPEEDCOLLECTED  1BC55D
PADDLESPEEDINFOBOTTOMOFFSET  FFFFFFDC
PADDLESPEEDINFOLEFTOFFSET  14
PADDLESPEEDINFOTEXT  1BC267
PADDLESPEEDLEFTOFFSET  4B
PADDLESPEEDTEXT     1BC366
PADDLESPEEDXPOSITION  FF
PADDLESPEEDYPOSITION  1D6
PADDLEVELOCITY      25
PADDLEWALLSOUND     1BC141
PADDLEWALLSOUNDPOSITION  1
PADDLEWIDTH         40
PENCOLORTRAP        50
PIXELOFFSET         A
PIXELTOBYTEVAL      2
PLAYAGAINBOTTOMOFFSET  19
PLAYAGAINENABLED    1B88
PLAYAGAINLEFTOFFSET  28
PLAYAGAINTEXT       1BC316
PLAYBRICKEXPLODE    1E4A
PLAYDEFEATMUSIC     1EA2
PLAYERINPUT         10CE
PLAYERSTARTINGPOSX  8E4
PLAYMUSIC           1E1A
PLAYONCEVALUE       0
PLAYPADDLEWALL      1E2E
PLAYPOWERUP         1E66
PLAYVICTORYMUSIC    1E90
PLAYWAVDIRECTTRAP   4B
POPULATEFROMTABLE   1CF6
POWERUPCOLLECT      2
POWERUPHANDLER      1D66
POWERUPHEIGHTDISPLAY  1E
POWERUPSOUND        1BC160
POWERUPSOUNDPOSITION  3
POWERUPSTEXT        1BC285
POWERUPSTEXTBOTTOMOFFSET  FFFFFFE6
POWERUPSTEXTLEFTOFFSET  DC
POWERUPWIDTHDISPLAY  1E
PREPWIDTHHEIGHTINGAMEUI  1870
PREPWIDTHHEIGHTUI   1866
QUITBOTTOMOFFSET    32
QUITBUTTONINPUT     51
QUITEARLYINPUT      198A
QUITLEFTOFFSET      67
QUITTEXT            1BC1CA
RANDOMIZEBALLSELECTION  148E
RANDOMLYCHOSENBALL  1BC12E
RANDOMNUM           1810
RANDOMVALUE         1BC12A
REPAINTFROMBUFFERTRAP  5E
RESETBALLINFORMATION  173C
RESETGAME           18B8
RESETROW            17C0
RETURNTOGAMELOOP    1C52
RIGHTINPUT          10F4
ROTATESWAPVAL       8
ROWSOFBRICKS        8
ROWSTARTBYTESKIP    1040
SCORE               1BC390
SCORELEFTOFFSET     1E0
SCORETEXT           1BC34B
SECONDCOL           F0
SEEDRANDOMNUMBER    1810
SEGMENTTABLE        1D24
SEGMENTWHTABLE      1D2E
SETDOUBLEBUFFERING  1894
SETDRAWINGMODETRAP  5C
SETLEFTCOLLIDED     112E
SETLIVESLED         1C12
SETRESOLUTION       187E
SETRIGHTCOLLIDED    1114
SETSCORELED         1C26
SETWIDTHINFORMATION  109C
SHIFTINPUTAMOUNT    8
SHIFTVALANDCHECKFORDONE  1CE8
SHOWDOUBLESCOREICON  1A28
SHOWDOUBLESCOREINFOTEXT  1A48
SHOWDOUBLESCORETEXT  1AD8
SHOWGAMEOVERUI      1B18
SHOWGAMEWINUI       1B4A
SHOWGOALTEXT        19B8
SHOWGREENBRICK      19D2
SHOWGREENTEXT       19F2
SHOWLEGEND          19B8
SHOWLIVESTEXT       1AB0
SHOWLOADINGSCREEN   1A74
SHOWPADDLESPEEDICON  1A38
SHOWPADDLESPEEDINFOTEXT  1A62
SHOWPADDLESPEEDTEXT  1AF8
SHOWPLAYAGAINTEXT   1B32
SHOWPOWERUPSTEXT    1A18
SHOWQUITTEXT        1956
SHOWSCORETEXT       1AC8
SHOWSTARTINGSCREEN  1928
SHOWSTARTTEXT       1942
SHOWTHANKSTEXT      19A0
SHOWTITLETEXT       1928
SHOWYELLOWBRICK     19E2
SHOWYELLOWTEXT      1A0C
SIDECOLLISION       166A
SIDEGREEN           1664
SIDEVELOCITYCHANGE  1670
SIDEYELLOW          165A
SOUNDHANDLER        1DA4
SPACEBARINPUT       20
SPEEDCOLOR          A41E9B
SPEEDLOCATIONSCREENX  20D
SPEEDLOCATIONSCREENY  19
STACKOFFSETFOREARLYQUIT  4
STANDARDPLAYERTRAP  4C
START               1ECC
STARTBOTTOMOFFSET   4B
STARTINGSCORE       0
STARTINGSEGOFFSET   30
STARTINGXPOSITION   28
STARTINGYPOSITION   1C
STARTLEFTOFFSET     64
STARTSCREENINPUT    196C
STARTTEXT           1BC1B1
STOPGAMEENDMUSIC    1EB4
STOPMUSIC           1E82
STOPPINGVALUE       2
SWAPBUFFER          18B0
TEMPRANDOMLONG      1862
THANKSLEFTOFFSET    4B
THANKSTEXT          1BC2C3
THIRDCOL            168
TITLEANDLOADINGSCREENS  1EDC
TITLEBOTTOMOFFSET   64
TITLELEFTOFFSET     73
TITLETEXT           1BC194
TOPCOLLISION        168C
TOPGREEN            1686
TOPVELOCITYCHANGE   1692
TOPYELLOW           167C
TRANSPARENTCOLOR    F200FF
UIHANDLER           1866
UISHIFTAMOUNT       1
UPDATEBALL          14AE
UPDATEHORIZONTAL    16D0
UPDATELED           1C00
UPDATEVERTICAL      1706
USERINPUTTRAP       13
VELOCITYTOADD       D
WHITECOLOR          FFFFFF
WIDTHBYTESKIP       1048
WIDTHCOORDOFFSET    0
WIDTHDISPLAYREF     10
WIDTHFILEOFFSET     12
WIDTHFILEOFFSETREF  14
WIDTHWORDOFFSET     4
YELLOWBRICK         1B8402
YELLOWBRICKSCORE    A
YELLOWBRICKTEXT     1BC23B
YELLOWBRICKTEXTBOTTOMOFFSET  FFFFFFE1
YELLOWBRICKTEXTLEFTOFFSET  14
YELLOWBRICKXPOSITION  FA
YELLOWBRICKYPOSITION  17C
